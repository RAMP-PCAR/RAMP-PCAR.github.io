{
    "project": {
        "name": "ramp-gis-viewer",
        "subname": "Reusable Accessible Mapping Platform",
        "version": "3.0.0",
        "description": "RAMP GIS viewer - Bobcat; Sample of an implementation of RAMP",
        "linkNatives": "true",
        "logo": "../../assets/images/bobcat_logo_sharp_smaller_s.png"
    },
    "files": {
        "src\\js\\RAMP\\Modules\\advancedToolbar.js": {
            "name": "src\\js\\RAMP\\Modules\\advancedToolbar.js",
            "modules": {
                "Tools": 1
            },
            "classes": {
                "AdvancedToolbar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\basemapSelector.js": {
            "name": "src\\js\\RAMP\\Modules\\basemapSelector.js",
            "modules": {},
            "classes": {
                "BaseMapSelector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\bookmarkLink.js": {
            "name": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "modules": {
                "BookmarkLink": 1
            },
            "classes": {
                "BookmarkLink": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\datagrid.js": {
            "name": "src\\js\\RAMP\\Modules\\datagrid.js",
            "modules": {
                "Datagrid": 1
            },
            "classes": {
                "Datagrid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\datagridClickHandler.js": {
            "name": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "modules": {},
            "classes": {
                "DatagridClickHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\eventManager.js": {
            "name": "src\\js\\RAMP\\Modules\\eventManager.js",
            "modules": {
                "UI": 1
            },
            "classes": {
                "EventManager": 1
            },
            "fors": {
                "FilterManager": 1,
                "GUI": 1,
                "FeatureHighlighter": 1,
                "Maptips": 1,
                "RampMap": 1,
                "BaseMapSelector": 1,
                "Datagrid": 1
            },
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\featureClickHandler.js": {
            "name": "src\\js\\RAMP\\Modules\\featureClickHandler.js",
            "modules": {
                "Map": 1
            },
            "classes": {
                "FeatureClickHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\featureHighlighter.js": {
            "name": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "modules": {},
            "classes": {
                "FeatureHighlighter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\filterManager.js": {
            "name": "src\\js\\RAMP\\Modules\\filterManager.js",
            "modules": {
                "FilterManager": 1
            },
            "classes": {
                "FilterManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\globalStorage.js": {
            "name": "src\\js\\RAMP\\Modules\\globalStorage.js",
            "modules": {
                "GlobalStorage": 1
            },
            "classes": {
                "GlobalStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\graphicExtension.js": {
            "name": "src\\js\\RAMP\\Modules\\graphicExtension.js",
            "modules": {},
            "classes": {
                "GraphicExtension": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\gui.js": {
            "name": "src\\js\\RAMP\\Modules\\gui.js",
            "modules": {},
            "classes": {
                "GUI": 1,
                "SubPanelSettings": 1,
                "SubPanel": 1
            },
            "fors": {
                "SubPanel": 1,
                "SubPanelSettings": 1,
                "GUI": 1,
                "SidePanel": 1
            },
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\map.js": {
            "name": "src\\js\\RAMP\\Modules\\map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\mapClickHandler.js": {
            "name": "src\\js\\RAMP\\Modules\\mapClickHandler.js",
            "modules": {},
            "classes": {
                "MapClickHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\maptips.js": {
            "name": "src\\js\\RAMP\\Modules\\maptips.js",
            "modules": {
                "Maptips": 1
            },
            "classes": {
                "Maptips": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\navigation.js": {
            "name": "src\\js\\RAMP\\Modules\\navigation.js",
            "modules": {
                "Navigation": 1
            },
            "classes": {
                "Navigation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\quickzoom.js": {
            "name": "src\\js\\RAMP\\Modules\\quickzoom.js",
            "modules": {
                "QuickZoom": 1
            },
            "classes": {
                "QuickZoom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\ramp.js": {
            "name": "src\\js\\RAMP\\Modules\\ramp.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Modules\\theme.js": {
            "name": "src\\js\\RAMP\\Modules\\theme.js",
            "modules": {
                "Theme": 1
            },
            "classes": {
                "Theme": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Tools\\areaTool.js": {
            "name": "src\\js\\RAMP\\Tools\\areaTool.js",
            "modules": {
                "MeasureTool": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Tools\\baseTool.js": {
            "name": "src\\js\\RAMP\\Tools\\baseTool.js",
            "modules": {},
            "classes": {
                "BaseTool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Tools\\bufferTool.js": {
            "name": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "modules": {},
            "classes": {
                "BufferTool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Tools\\distanceTool.js": {
            "name": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "modules": {},
            "classes": {
                "MeasureTool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Tools\\populationTool.js": {
            "name": "src\\js\\RAMP\\Tools\\populationTool.js",
            "modules": {},
            "classes": {
                "PopulationTool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\array.js": {
            "name": "src\\js\\RAMP\\Utils\\array.js",
            "modules": {},
            "classes": {
                "Array": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\checkbox.js": {
            "name": "src\\js\\RAMP\\Utils\\checkbox.js",
            "modules": {},
            "classes": {
                "Checkbox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\checkboxGroup.js": {
            "name": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "modules": {},
            "classes": {
                "CheckboxGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\decorator.js": {
            "name": "src\\js\\RAMP\\Utils\\decorator.js",
            "modules": {},
            "classes": {
                "Decorator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\dictionary.js": {
            "name": "src\\js\\RAMP\\Utils\\dictionary.js",
            "modules": {},
            "classes": {
                "Dictionary": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\functionMangler.js": {
            "name": "src\\js\\RAMP\\Utils\\functionMangler.js",
            "modules": {},
            "classes": {
                "FunctionMangler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\popupManager.js": {
            "name": "src\\js\\RAMP\\Utils\\popupManager.js",
            "modules": {},
            "classes": {
                "PopupManager": 1,
                "PopupBaseSettings": 1,
                "PopupBase": 1,
                "Popup": 1
            },
            "fors": {
                "PopupBase": 1,
                "PopupBaseSettings": 1,
                "PopupManager": 1,
                "Popup": 1
            },
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\prototype.js": {
            "name": "src\\js\\RAMP\\Utils\\prototype.js",
            "modules": {},
            "classes": {
                "Prototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\tmplHelper.js": {
            "name": "src\\js\\RAMP\\Utils\\tmplHelper.js",
            "modules": {
                "TmplUtil": 1
            },
            "classes": {
                "TmplHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\tmplUtil.js": {
            "name": "src\\js\\RAMP\\Utils\\tmplUtil.js",
            "modules": {},
            "classes": {
                "TmplUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\url.js": {
            "name": "src\\js\\RAMP\\Utils\\url.js",
            "modules": {},
            "classes": {
                "Url": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\Utils\\util.js": {
            "name": "src\\js\\RAMP\\Utils\\util.js",
            "modules": {
                "Utils": 1
            },
            "classes": {
                "Util": 1
            },
            "fors": {
                "Util": 1
            },
            "namespaces": {}
        },
        "src\\js\\RAMP\\RAMP-starter.js": {
            "name": "src\\js\\RAMP\\RAMP-starter.js",
            "modules": {},
            "classes": {
                "RAMP": 1,
                "RAMPStarter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\RAMP\\bootstrapper.js": {
            "name": "src\\js\\RAMP\\bootstrapper.js",
            "modules": {
                "RAMP": 1
            },
            "classes": {
                "Bootstrapper": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Tools": {
            "name": "Tools",
            "submodules": {},
            "classes": {
                "AdvancedToolbar": 1,
                "BaseTool": 1,
                "BufferTool": 1,
                "PopulationTool": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 7,
            "description": "Tools module. Contains tools accessible through Advanced Toolbar.\n\nContains the advanced tools as a popup.",
            "itemtype": "main"
        },
        "RAMP": {
            "name": "RAMP",
            "submodules": {
                "BookmarkLink": 1,
                "Datagrid": 1,
                "Map": 1,
                "FilterManager": 1,
                "GlobalStorage": 1,
                "Navigation": 1,
                "QuickZoom": 1,
                "Theme": 1,
                "MeasureTool": 1
            },
            "classes": {
                "BaseMapSelector": 1,
                "BookmarkLink": 1,
                "Datagrid": 1,
                "DatagridClickHandler": 1,
                "FilterManager": 1,
                "GUI": 1,
                "FeatureHighlighter": 1,
                "FeatureClickHandler": 1,
                "GlobalStorage": 1,
                "GraphicExtension": 1,
                "SubPanelSettings": 1,
                "SubPanel": 1,
                "SidePanel": 1,
                "Map": 1,
                "MapClickHandler": 1,
                "Navigation": 1,
                "QuickZoom": 1,
                "RAMP": 1,
                "Theme": 1,
                "MeasureTool": 1,
                "RAMPStarter": 1,
                "Bootstrapper": 1
            },
            "fors": {
                "SubPanel": 1,
                "SubPanelSettings": 1,
                "GUI": 1,
                "SidePanel": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "src\\js\\RAMP\\bootstrapper.js",
            "line": 10,
            "description": "Ramp module",
            "itemtype": "main"
        },
        "BookmarkLink": {
            "name": "BookmarkLink",
            "submodules": {},
            "classes": {
                "BookmarkLink": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 19,
            "description": "BookmarkLink submodule\n\nKeeps track of the current state of the map and updates the GetLinkPanel's textbook accordingly. On page load, if any\nparameters are detected in the URL, this module will attempt to recreate the map according to the parameters. Internally,\nthis module subscribes to all events that change the state of the map (e.g. extent-change, layers toggled on/off). It contains\na dictionary that map event names to an object that contains the minimum information needed to reconstruct the map for that particular\nevent. For example, if an extent change occurred, this module will add a key \"map/extent-change\" (or update if the entry already exists)\nand put an object that contains the minimum information needed to reconstruct the map to that extent (in this case it would be\nxmin, ymin, xmax, ymax. Spatial reference is not needed since the map always has the same spatial reference).",
            "tag": "main",
            "itemtype": "main"
        },
        "Datagrid": {
            "name": "Datagrid",
            "submodules": {},
            "classes": {
                "Datagrid": 1,
                "DatagridClickHandler": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 10,
            "description": "Datagrid submodule.",
            "tag": "main",
            "itemtype": "main"
        },
        "UI": {
            "name": "UI",
            "submodules": {},
            "classes": {
                "EventManager": 1,
                "GUI": 1,
                "RampMap": 1,
                "SubPanelSettings": 1,
                "SubPanel": 1,
                "SidePanel": 1
            },
            "fors": {
                "FilterManager": 1,
                "GUI": 1,
                "FeatureHighlighter": 1,
                "Maptips": 1,
                "RampMap": 1,
                "BaseMapSelector": 1,
                "Datagrid": 1,
                "SubPanel": 1,
                "SubPanelSettings": 1,
                "SidePanel": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 233,
            "description": "A class for handling most of the GUI on the page.",
            "module": "RAMP",
            "itemtype": "main"
        },
        "Map": {
            "name": "Map",
            "submodules": {
                "Maptips": 1
            },
            "classes": {
                "FeatureHighlighter": 1,
                "Maptips": 1,
                "FeatureClickHandler": 1,
                "GraphicExtension": 1,
                "Map": 1,
                "MapClickHandler": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\mapClickHandler.js",
            "line": 8,
            "description": "A RAMP Map module with ESRI and Dojo AMD Modules\n This module provides function to create an ESRI web map control. A global config object is\n required to initialize the map.",
            "tag": "main",
            "itemtype": "main"
        },
        "FilterManager": {
            "name": "FilterManager",
            "submodules": {},
            "classes": {
                "FilterManager": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 11,
            "description": "FilterManager submodule",
            "tag": "main",
            "itemtype": "main"
        },
        "GlobalStorage": {
            "name": "GlobalStorage",
            "submodules": {},
            "classes": {
                "GlobalStorage": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\globalStorage.js",
            "line": 13,
            "description": "GlobalStorage class is used to store variables and exchange them between different modules. Each module has the ability to add variables to the global storage and retrieve them as needed."
        },
        "Maptips": {
            "name": "Maptips",
            "submodules": {},
            "classes": {
                "Maptips": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Map",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 11,
            "description": "Maptips class.\n\nThe map tip module provides functions to create a small popup window as the mouse hovers over a feature on the map (point, polygon, line, etc.).\nNOTE: This module uses global config object. featureLayers->mapTipSettings"
        },
        "Navigation": {
            "name": "Navigation",
            "submodules": {},
            "classes": {
                "Navigation": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\navigation.js",
            "line": 11,
            "description": "Navigation submodule",
            "tag": "main",
            "itemtype": "main"
        },
        "QuickZoom": {
            "name": "QuickZoom",
            "submodules": {},
            "classes": {
                "QuickZoom": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\quickzoom.js",
            "line": 13,
            "description": "QuickZoom submodule",
            "tag": "main",
            "itemtype": "main"
        },
        "Theme": {
            "name": "Theme",
            "submodules": {},
            "classes": {
                "Theme": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\theme.js",
            "line": 11,
            "description": "This submodule contains theme-specific classes with animation sequences such as Full Screen transition or tooltip setter helper method."
        },
        "MeasureTool": {
            "name": "MeasureTool",
            "submodules": {},
            "classes": {
                "MeasureTool": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 14,
            "description": "MeasureTool submodule.\n\nComputes the area and perimeter length of a selected area. When the user draws a polygon, the area\nand length will be displayed in the bottom right corner.",
            "tag": "main",
            "itemtype": "main"
        },
        "Utils": {
            "name": "Utils",
            "submodules": {
                "TmplUtil": 1
            },
            "classes": {
                "Array": 1,
                "Checkbox": 1,
                "CheckboxGroup": 1,
                "Decorator": 1,
                "Dictionary": 1,
                "FunctionMangler": 1,
                "PopupManager": 1,
                "PopupBaseSettings": 1,
                "PopupBase": 1,
                "Popup": 1,
                "Prototype": 1,
                "TmplHelper": 1,
                "TmplUtil": 1,
                "Url": 1,
                "Util": 1
            },
            "fors": {
                "PopupBase": 1,
                "PopupBaseSettings": 1,
                "PopupManager": 1,
                "Popup": 1,
                "Util": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 11,
            "description": "Utility module containing useful static classes.",
            "uses": [
                "dojo/_base/declare",
                "dojo/io-query"
            ],
            "itemtype": "main"
        },
        "TmplUtil": {
            "name": "TmplUtil",
            "submodules": {},
            "classes": {
                "TmplHelper": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\tmplHelper.js",
            "line": 11,
            "description": "Utility module containing useful static classes."
        }
    },
    "classes": {
        "AdvancedToolbar": {
            "name": "AdvancedToolbar",
            "shortname": "AdvancedToolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "Tools",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\advancedToolbar.js",
            "line": 12,
            "description": "AdvancedToolbar class.",
            "static": 1,
            "uses": [
                "dojo/_base/lang",
                "dojo/_base/array",
                "dojo/topic",
                "dojo/Deferred",
                "ramp/eventManager",
                "ramp/map",
                "ramp/globalStorage",
                "PopupManager"
            ]
        },
        "BaseMapSelector": {
            "name": "BaseMapSelector",
            "shortname": "BaseMapSelector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\basemapSelector.js",
            "line": 9,
            "description": "Populates the BasemapGallery widget located in the maps toolbar with items found in the application configuration.\nThis module also handles all the event  needed to change the map basemap and update the UI",
            "static": 1,
            "uses": [
                "dojo/_base/array",
                "dojo/_base/lang",
                "dojo/dom-attr",
                "dojo/query",
                "dojo/topic",
                "templates/basemap_selector_template.json",
                "GlobalStorage",
                "Map",
                "EventManager",
                "esri/dijit/BasemapGallery",
                "utils/popupManager",
                "utils/thmplHelper"
            ]
        },
        "BookmarkLink": {
            "name": "BookmarkLink",
            "shortname": "BookmarkLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "RAMP",
            "submodule": "BookmarkLink",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 19,
            "description": "BookmarkLink class.\n\n\n### Steps for making the bookmark link update with an event\n\n1. Subscribe to the event of interest (e.g. map extent-change)\n2. Create an object containing fields that will contain the necessary\n   information for reconstructing the map to the same state. (e.g. for\n   map extent-change, a useful object might be one that represents the\n   current extent of the map: `{ xmin : 123, xmax : 456, ymin : 789, ymax : 000}).`\n\n  __IMPORTANT__: the object must be serializable since it will be added to the URL and\n  should serialize to a reasonable length String. If the fields contain\n  non-primitives, e.g. array, object, one must manually serialize the field first.\n  Also only use anonymous objects with custom fields, do not use class objects\n  (e.g. use an anonymous { } object to store map extent instead of ESRI's map\n  {{#crossLink \"Esri/geometry/Extent\"}}{{/crossLink}} object, since it will contain other fields and methods that will also\n  be serialized).\n\n3. Call updateURL, passing it a name (e.g. \"newExtent\") and the object\n   (a name is required for efficiency, this way the URL will only need to\n   serialize and update the given object instead of all objects).",
            "static": 1,
            "uses": [
                "dojo/_base/declare",
                "require",
                "dojo/dom-construct",
                "dojo/io-query",
                "dojo/_base/lang",
                "dojo/dom",
                "dojo/_base/array",
                "dojo/topic",
                "dijit/form/TextBox",
                "dijit/TitlePane",
                "esri/geometry/Extent",
                "GlobalStorage",
                "Map",
                "EventManager",
                "Url",
                "Util",
                "Dictionary",
                "PopupManager"
            ]
        },
        "Datagrid": {
            "name": "Datagrid",
            "shortname": "Datagrid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "RAMP",
            "submodule": "Datagrid",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 12,
            "description": "The Datagrid class represents the side bar table shown next to the map. The data grid displays all map objects in a text format and allows the user to see more\ndetails (same as clicking the map object) and navigate to the object. This class create the UI panel, events, and event-handles for the data grid container.",
            "static": 1,
            "uses": [
                "dojo/_base/declare",
                "dojo/_base/lang",
                "dojo/query",
                "dojo/_base/array",
                "dojo/dom-class",
                "dojo/dom-attr",
                "dojo/dom-construct",
                "dojo/topic",
                "dojo/on",
                "esri/layers/FeatureLayer",
                "esri/tasks/query",
                "Ramp",
                "GraphicExtension",
                "GlobalStorage",
                "Gui",
                "DatagridClickHandler",
                "Map",
                "EventManager",
                "Theme",
                "Util",
                "Array",
                "Dictionary",
                "PopupManager",
                "TmplHelper"
            ]
        },
        "DatagridClickHandler": {
            "name": "DatagridClickHandler",
            "shortname": "DatagridClickHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Datagrid"
            ],
            "module": "RAMP",
            "submodule": "Datagrid",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 10,
            "description": "Datagridclick handler class.",
            "static": 1,
            "uses": [
                "RAMP",
                "GraphicExtension",
                "EventManager",
                "dojo/topic",
                "dojo/dom-construct",
                "Util"
            ]
        },
        "EventManager": {
            "name": "EventManager",
            "shortname": "EventManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BaseMapSelector",
                "BookmarkLink",
                "Datagrid",
                "DatagridClickHandler",
                "FilterManager",
                "GUI",
                "FeatureHighlighter",
                "Maptips",
                "FeatureClickHandler",
                "Map",
                "MapClickHandler",
                "Navigation",
                "Bootstrapper"
            ],
            "module": "UI",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 9,
            "description": "EventManager class.\nA dictionary containing the names of all the events published and subscribed by this module.\nUsers should publish and subscribe to events of this module using this dictionary instead of\ntyping the name of the event.",
            "static": 1
        },
        "FilterManager": {
            "name": "FilterManager",
            "shortname": "FilterManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 11,
            "description": "FilterManager class. Represents the legend next to the map and the controls to toggle each map layer's visibility and boundary box.\nThe FilterManager also includes a attribute filter that allows the user to hide map features based on a attribute values\n\nFor a doc with diagrams on how this class works, please see\nhttp://ecollab.ncr.int.ec.gc.ca/projects/science-apps/priv/RAMP/RAMP%20AMD%20Filter%20Module.docx",
            "submodule": "FilterManager",
            "static": 1,
            "uses": [
                "dojo/_base/declare",
                "dojo/_base/lang",
                "dojo/query",
                "dojo/_base/array",
                "dojo/dom",
                "dojo/on",
                "dojo/dom-class",
                "dojo/dom-style",
                "dojo/dom-construct",
                "dojo/_base/connect",
                "dojo/Deferred",
                "dojo/topic",
                "dojo/aspect",
                "dojo/promise/all",
                "templates/filter_manager_template.json",
                "esri/tasks/query",
                "esri/layers/FeatureLayer",
                "RAMP",
                "GlobalStorage",
                "Map",
                "EventManager",
                "Util",
                "Array",
                "Dictionary",
                "PopupManager",
                "Checkbox",
                "CheckboxGroup"
            ],
            "uese": "TmplHelper"
        },
        "GUI": {
            "name": "GUI",
            "shortname": "GUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 12,
            "description": "A class for handling most of the GUI on the page.",
            "submodule": "UI",
            "static": 1,
            "uses": [
                "dojo/_base/array",
                "dojo/topic",
                "dojo/_base/lang",
                "dojo/Deferred",
                "dojo/domReady!",
                "GlobalStorage",
                "EventManager",
                "Theme",
                "templates/sub_panel_Template.html",
                "templates/sub_panel_template.json",
                "templates/sub_panel_content_Template.html",
                "Util",
                "Dictionary",
                "PopupManager",
                "TmplHelper",
                "dojo/domReady!"
            ]
        },
        "FeatureHighlighter": {
            "name": "FeatureHighlighter",
            "shortname": "FeatureHighlighter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 10,
            "description": "A class responsible for highlighting points, lines, and shapes on the map upon selection and consequent hover actions.\nThe highlighting is achieved by manipulating svg rendering of the map as follows:\n - all existing feature layers are wrapped into a group object\n - three more group objects are created:\n     - `highlight group` is positioned after the `graphicGroup`\n     - `zoomlight group` is positioned before the `graphicGroup`\n     - `hoverlight group` is positioned before the `zoomlight group`\n\nand changing the opacity of the `graphicGroup` while adding shapes to one or more of the additional group objects.",
            "submodule": "Map",
            "static": 1,
            "uses": [
                "dojo/_base/declare",
                "dojo/topic",
                "GlobalStorage",
                "Map",
                "EventManager",
                "Util",
                "Dictionary"
            ]
        },
        "Maptips": {
            "name": "Maptips",
            "shortname": "Maptips",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "Map",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 11,
            "description": "Maptips class.\n\nThe map tip module provides functions to create a small popup window as the mouse hovers over a feature on the map (point, polygon, line, etc.).\nNOTE: This module uses global config object. featureLayers->mapTipSettings",
            "submodule": "Maptips",
            "static": 1,
            "uses": [
                "dojo/topic",
                "RAMP",
                "EventManager",
                "TmplHelper",
                "templates/feature_hovertip_template.json",
                "templates/feature_anchortip_template.json"
            ]
        },
        "RampMap": {
            "name": "RampMap",
            "shortname": "RampMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": ""
        },
        "FeatureClickHandler": {
            "name": "FeatureClickHandler",
            "shortname": "FeatureClickHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Map"
            ],
            "module": "RAMP",
            "submodule": "Map",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\featureClickHandler.js",
            "line": 10,
            "description": "Feature click handler class.\n\nThe featureClickHandler uses Dojo/Topic to publish centralized global mouse event messages\nrelated to feature selection. Any function subscribes to the topic will be able handle the\nspecific event.",
            "static": 1,
            "uses": [
                "GraphicExtension",
                "EventManager",
                "dojo/topic",
                "dojo/dom-construct",
                "Util"
            ]
        },
        "GlobalStorage": {
            "name": "GlobalStorage",
            "shortname": "GlobalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BaseMapSelector",
                "BookmarkLink",
                "Datagrid",
                "FilterManager",
                "GUI",
                "FeatureHighlighter",
                "Map",
                "Navigation",
                "QuickZoom",
                "RAMP",
                "MeasureTool",
                "BaseTool",
                "BufferTool",
                "PopulationTool",
                "TmplHelper",
                "Bootstrapper"
            ],
            "module": "RAMP",
            "submodule": "GlobalStorage",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\globalStorage.js",
            "line": 13,
            "description": "GlobalStorage class is used to store variables and exchange them between different modules. Each module has the ability to add variables to the global storage and retrieve them as needed."
        },
        "GraphicExtension": {
            "name": "GraphicExtension",
            "shortname": "GraphicExtension",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Datagrid",
                "DatagridClickHandler",
                "FeatureClickHandler"
            ],
            "module": "RAMP",
            "submodule": "Map",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\graphicExtension.js",
            "line": 12,
            "description": "GraphicExtension class containing helper functions for graphic objects.\nNote this class requires the config object.",
            "static": 1,
            "uses": [
                "RAMP",
                "Array",
                "Dictionary",
                "Util",
                "templates/point_details_list_Template.html",
                "templates/point_details_list_item_Template.html"
            ]
        },
        "SubPanelSettings": {
            "name": "SubPanelSettings",
            "shortname": "SubPanelSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "submodule": "UI",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 83,
            "description": "A class holding properties of the SubPanel."
        },
        "SubPanel": {
            "name": "SubPanel",
            "shortname": "SubPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "submodule": "UI",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 233,
            "description": "[subPanelPrototype description]",
            "is_constructor": 1
        },
        "SidePanel": {
            "name": "SidePanel",
            "shortname": "SidePanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "submodule": "UI",
            "namespace": ""
        },
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BaseMapSelector",
                "BookmarkLink",
                "Datagrid",
                "FilterManager",
                "FeatureHighlighter",
                "QuickZoom",
                "MeasureTool",
                "BufferTool",
                "PopulationTool",
                "Bootstrapper"
            ],
            "module": "RAMP",
            "submodule": "Map",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 14,
            "description": "Map class represents the ESRI map object. The map is generated based on the application configuration and templates.",
            "uses": [
                "dojo/_base/declare",
                "dojo/_base/array",
                "dojo/dom",
                "dojo/dom-class",
                "dojo/dom-construct",
                "dojo/number",
                "dojo/query",
                "dojo/_base/lang",
                "dojo/topic",
                "dojo/on",
                "esri/map",
                "esri/layers/FeatureLayer",
                "esri/layers/ArcGISTiledMapServiceLayer",
                "esri/layers/ArcGISDynamicMapServiceLayer",
                "esri/layers/WMSLayer",
                "esri/layers/WMSLayerInfo",
                "esri/tasks/GeometryService",
                "esri/tasks/ProjectParameters",
                "esri/geometry/Polygon",
                "esri/SpatialReference",
                "esri/dijit/Scalebar",
                "esri/geometry/Extent",
                "esri/graphicsUtils",
                "GlobalStorage",
                "RAMP",
                "FeatureClickHandler",
                "Navigation",
                "EventManager",
                "Util",
                "Array"
            ]
        },
        "MapClickHandler": {
            "name": "MapClickHandler",
            "shortname": "MapClickHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "submodule": "Map",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\mapClickHandler.js",
            "line": 8,
            "description": "Map click handler class.\n\nThe mapClickHandler registers WMS layers for combined getFeatureInfo request.  It makes a \nsingle subscription to Map.CLICK and triggers a set of requests and joins the results together.",
            "static": 1,
            "uses": [
                "EventManager",
                "esri/request",
                "dojo/promise/all",
                "dojo/_base/array",
                "dojo/topic"
            ]
        },
        "Navigation": {
            "name": "Navigation",
            "shortname": "Navigation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Map",
                "Bootstrapper"
            ],
            "module": "RAMP",
            "submodule": "Navigation",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\navigation.js",
            "line": 11,
            "description": "Navigation class.\n\nThis module provide function to initialize navigation widget using settings stored in\nglobal configuration object.\n\nNOTE: jquery.ui.navigation.js is required to create the object",
            "static": 1,
            "uses": [
                "dojo/_base/declare",
                "dojo/topic",
                "GlobalStorage",
                "EventManager"
            ]
        },
        "QuickZoom": {
            "name": "QuickZoom",
            "shortname": "QuickZoom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "submodule": "QuickZoom",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\quickzoom.js",
            "line": 13,
            "description": "The QuickZoom class handles zooming in the map based on province, city, or postal code.\nThese zoom in services rely on web services which return extent values based the user-entered province, city, or postal code",
            "uses": [
                "dojo/_base/declare",
                "dojo/_base/array",
                "dojo/_base/lang",
                "dojo/dom",
                "dojo/dom-construct",
                "dijit/form/Form",
                "dijit/form/TextBox",
                "dijit/form/Select",
                "dijit/form/Button",
                "esri/geometry/Extent",
                "esri/tasks/QueryTask",
                "esri/tasks/query",
                "GlobalStorage",
                "Map",
                "Util"
            ]
        },
        "RAMP": {
            "name": "RAMP",
            "shortname": "RAMP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DatagridClickHandler",
                "FilterManager",
                "Maptips",
                "GraphicExtension",
                "Map",
                "TmplHelper"
            ],
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\RAMP-starter.js",
            "line": 25,
            "description": "RAMP global class.\nA general globally available class to hold any RAMP global data. Currently houses any plugins which are not loaded via AMD.",
            "uses": [
                "dojo/_base/declare",
                "dojo/query",
                "dojo/_base/array",
                "dojo/dom",
                "dojo/dom-class",
                "dojo/dom-style",
                "dojo/dom-construct",
                "dojo/request/script",
                "GlobalStorage",
                "Array",
                "Dictionary",
                "Util",
                "TmplUtil"
            ]
        },
        "Theme": {
            "name": "Theme",
            "shortname": "Theme",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Datagrid",
                "GUI"
            ],
            "module": "RAMP",
            "submodule": "Theme",
            "namespace": "",
            "file": "src\\js\\RAMP\\Modules\\theme.js",
            "line": 11,
            "description": "Base theme for RAMP."
        },
        "MeasureTool": {
            "name": "MeasureTool",
            "shortname": "MeasureTool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "submodule": "MeasureTool",
            "namespace": "",
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 14,
            "description": "MeasureTool class.",
            "static": 1,
            "uses": [
                "dojo/dom",
                "dojo/_base/lang",
                "esri/config",
                "esri/graphic",
                "esri/tasks/GeometryService",
                "esri/tasks/AreasAndLengthsParameters",
                "esri/toolbars/draw",
                "esri/symbols/SimpleFillSymbol",
                "Map",
                "GlobalStorage"
            ]
        },
        "BaseTool": {
            "name": "BaseTool",
            "shortname": "BaseTool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tools",
            "namespace": "",
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 7,
            "description": "BaseTool provides essential functionality for Tools including handling of the activate toggle, setting `busy` state, injecting output float into the page,\nand templating the output. It's not required to mixin BaseTool, but it's really helpful; and of course any of the BaseTool methods/properties can be overwritten\nafter mixining it in.\n\nCall `initToggle` to initialize the tool.",
            "static": 1,
            "is_constructor": 1,
            "uses": [
                "dojo/Evented",
                "dojo/_base/lang",
                "dojo/Deferred",
                "dojo/text!./templates/tools_template.json",
                "GlobalStorage",
                "TmplHelper",
                "PopupManager",
                "Util"
            ]
        },
        "BufferTool": {
            "name": "BufferTool",
            "shortname": "BufferTool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tools",
            "namespace": "",
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 7,
            "description": "BufferTool.\n\nAdds a buffer around the a selected area. The user will be able to specify the distance\nin the bottom right corner, then draw a polygon on the map.",
            "static": 1,
            "uses": [
                "dojo/_base/array",
                "dojo/_base/Color",
                "esri/config",
                "esri/graphic",
                "esri/SpatialReference",
                "esri/symbols/SimpleLineSymbol",
                "esri/symbols/SimpleFillSymbol",
                "esri/tasks/GeometryService",
                "esri/tasks/BufferParameters",
                "esri/toolbars/draw",
                "Map",
                "GlobalStorage"
            ],
            "extends": "BaseTool"
        },
        "PopulationTool": {
            "name": "PopulationTool",
            "shortname": "PopulationTool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tools",
            "namespace": "",
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 7,
            "description": "PopulationTool.\n\nComputes the total population of a selected area. When the user draws a polygon, the population will\nbe displayed in the bottom right corner.",
            "static": 1,
            "uses": [
                "dojo/dom",
                "dojo/string",
                "dojo/_base/lang",
                "esri/config",
                "esri/graphic",
                "esri/tasks/Geoprocessor",
                "esri/tasks/FeatureSet",
                "esri/toolbars/draw",
                "esri/symbols/SimpleLineSymbol",
                "esri/symbols/SimpleFillSymbol",
                "Map",
                "GlobalStorage"
            ],
            "extends": "BaseTool"
        },
        "Array": {
            "name": "Array",
            "shortname": "Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Datagrid",
                "FilterManager",
                "GraphicExtension",
                "Map",
                "RAMP"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\array.js",
            "line": 8,
            "description": "Set of functions that deal with arrays.",
            "static": 1,
            "uses": [
                "dojo/_base/array",
                "dojo/_base/lang"
            ]
        },
        "Checkbox": {
            "name": "Checkbox",
            "shortname": "Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "FilterManager",
                "CheckboxGroup"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 7,
            "description": "Wraps the specified checkbox input nodes to provide an alternative rendering of checkbox without compromising\nits functionality. Handles synchronization of the checkbox's state with its new rendering.\nAlso adds highlight/unhighlight on focus/unfocus, update label when checked/unchecked",
            "is_constructor": 1,
            "uses": [
                "dojo/Evented",
                "dojo/_base/declare",
                "dojo/lang"
            ],
            "params": [
                {
                    "name": "node",
                    "description": "a jQuery object representing the input checkbox node to be wrapped",
                    "type": "JObject"
                },
                {
                    "name": "options",
                    "description": "Additional options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "nodeIdAttr",
                            "description": "Name of the \"data-*\" attribute set on the checkbox node to be treated as the checkbox id. If no appropriate \"data-*\" attribute found,\n`nodeIdAttr` is used directly, failing that, regular `id` is used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cssClass",
                            "description": "`active`, `focus`, and `check` CSS class to be applied to the Checkbox correspondingly.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "active",
                                    "description": "CSS class to be set when the Checkbox is `active`.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "focus",
                                    "description": "CSS class to be set when the Checkbox is `focused`.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "check",
                                    "description": "CSS class to be set when the Checkbox is `checked`.",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "label",
                            "description": "`check` and `uncheck` label texts to be applied to the Checkbox labels.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "check",
                                    "description": "A text to be set as a label when the Checkbox is `checked`",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "uncheck",
                                    "description": "A text to be set as a label when the Checkbox is `unchecked`",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "onChnage",
                            "description": "A function to be called when the state of the Checkbox changes.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "A control objects allowing to toggle checkbox.",
                "type": "Checkbox"
            }
        },
        "CheckboxGroup": {
            "name": "CheckboxGroup",
            "shortname": "CheckboxGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "FilterManager"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 7,
            "description": "Creates a Checkbox group bound from the supplied JArray of input nodes. Optionally, the group is bound to the supplied master input node\nwhich acts as a global toggle for the group.",
            "is_constructor": 1,
            "uses": [
                "dojo/Evented",
                "dojo/_base/declare",
                "dojo/_base/lang",
                "dojo/_base/array",
                "Checkbox"
            ],
            "params": [
                {
                    "name": "nodes",
                    "description": "a jQuery object representing the checkboxes to be grouped",
                    "type": "JArray"
                },
                {
                    "name": "options",
                    "description": "Additional options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "nodeIdAttr",
                            "description": "Name of the \"data-*\" attribute set on the checkbox node to be treated as the checkbox id. If no appropriate \"data-*\" attribute found,\n`nodeIdAttr` is used directly, failing that, regular `id` is used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cssClass",
                            "description": "`active`, `focus`, and `check` CSS class to be applied to the Checkbox correspondingly.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "active",
                                    "description": "CSS class to be set when the Checkbox is `active`.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "focus",
                                    "description": "CSS class to be set when the Checkbox is `focused`.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "check",
                                    "description": "CSS class to be set when the Checkbox is `checked`.",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "label",
                            "description": "`check` and `uncheck` label texts to be applied to the Checkbox labels.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "check",
                                    "description": "A text to be set as a label when the Checkbox is `checked`",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "uncheck",
                                    "description": "A text to be set as a label when the Checkbox is `unchecked`",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "onChnage",
                            "description": "A function to be called when the state of the Checkbox changes.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "master",
                            "description": "Additional options applied to the master Checkbox.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "node",
                                    "description": "An `input` node to serve as the master Checkbox for the group.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "cssClass",
                                    "description": "`active`, `focus`, and `check` CSS class to be applied to the master Checkbox correspondingly.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "cssClass.active",
                                    "description": "CSS class to be set when the Checkbox is `active`.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "cssClass.focus",
                                    "description": "CSS class to be set when the master Checkbox is `focused`.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "cssClass.check",
                                    "description": "CSS class to be set when the master Checkbox is `checked`.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "`check` and `uncheck` label texts to be applied to the master Checkbox labels.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "label.check",
                                    "description": "A text to be set as a label when the master Checkbox is `checked`",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "label.uncheck",
                                    "description": "A text to be set as a label when the master Checkbox is `unchecked`",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "onChnage",
                                    "description": "A function to be called when the state of the master Checkbox changes.",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "A control objects allowing to toggle individual checkboxes in a group as well as the group as a whole.",
                "type": "CheckboxGroup"
            }
        },
        "Decorator": {
            "name": "Decorator",
            "shortname": "Decorator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\decorator.js",
            "line": 7,
            "description": "A class containing functions that accepts a function as argument and returns a function.",
            "static": 1
        },
        "Dictionary": {
            "name": "Dictionary",
            "shortname": "Dictionary",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BookmarkLink",
                "Datagrid",
                "FilterManager",
                "GUI",
                "FeatureHighlighter",
                "GraphicExtension",
                "RAMP"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 9,
            "description": "A set of useful functions for manipulating dictionaries.",
            "static": 1,
            "uses": [
                "dojo/_base/array",
                "dojo/_base/lang",
                "Util"
            ]
        },
        "FunctionMangler": {
            "name": "FunctionMangler",
            "shortname": "FunctionMangler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\functionMangler.js",
            "line": 9,
            "description": "??? Description",
            "static": 1,
            "uses": [
                "dojo/on",
                "dojo/_base/lang",
                "dojo/topic",
                "Util"
            ]
        },
        "PopupManager": {
            "name": "PopupManager",
            "shortname": "PopupManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "AdvancedToolbar",
                "BookmarkLink",
                "Datagrid",
                "FilterManager",
                "GUI",
                "BaseTool"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 9,
            "description": "A static class to simplify the creation of UI popups, where a popup is a section of the page hidden and shown in\nresponse to some user or system action. This class takes care of assigning aria-* attributes and keeping them updated.",
            "static": 1,
            "uses": [
                "dojo/Deferred",
                "dojo/_base/lang",
                "Util"
            ]
        },
        "PopupBaseSettings": {
            "name": "PopupBaseSettings",
            "shortname": "PopupBaseSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 23,
            "description": "A class holding properties of the popup."
        },
        "PopupBase": {
            "name": "PopupBase",
            "shortname": "PopupBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 143,
            "description": "An abstract representation of the popup definition that potentially references many Popup instances. Handle and target properties might use selectors."
        },
        "Popup": {
            "name": "Popup",
            "shortname": "Popup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 296,
            "description": "A concrete instance of popup referencing actual DOM nodes as its handle and target."
        },
        "Prototype": {
            "name": "Prototype",
            "shortname": "Prototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Bootstrapper"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 8,
            "description": "Adds method prototypes to predefined classes to enhance their functionality.",
            "static": 1,
            "uses": [
                "esri/geometry/Extent"
            ]
        },
        "TmplHelper": {
            "name": "TmplHelper",
            "shortname": "TmplHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Datagrid",
                "GUI",
                "Maptips",
                "BaseTool"
            ],
            "module": "Utils",
            "submodule": "TmplUtil",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\tmplHelper.js",
            "line": 11,
            "description": "A set of functions used to support and standardize the use of templating.",
            "static": 1,
            "uses": [
                "dojo/_base/lang",
                "GlobalStorage",
                "RAMP",
                "TmplUtil"
            ]
        },
        "TmplUtil": {
            "name": "TmplUtil",
            "shortname": "TmplUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "RAMP",
                "TmplHelper"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\tmplUtil.js",
            "line": 9,
            "description": "A set of functions that can be accessed within templates",
            "static": 1
        },
        "Url": {
            "name": "Url",
            "shortname": "Url",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BookmarkLink",
                "Bootstrapper"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\url.js",
            "line": 15,
            "description": "A simple class that replaces the `dojo._Url` functionality that became deprecated\nConstruct a Url object from a url string, then the uri and query\npart of the url string can be accessed from the Url's uri and query\nfield respectively.\n\n#####Example\n\n     require([\"scripts/Url\"], function(Url) {\n             var urlObj = new Url(\"http://somewebsite.com\");\n\n             // Access the uri and query using the urlObj's fields\n             var uri = urlObj.uri;\n             var query = urlObj.query;\n       });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fullUrl",
                    "description": "a string denoting the full url of a webpage",
                    "type": "String"
                }
            ],
            "uses": [
                "dojo/_base/declare",
                "dojo/io-query"
            ]
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BookmarkLink",
                "Datagrid",
                "DatagridClickHandler",
                "FilterManager",
                "GUI",
                "FeatureHighlighter",
                "FeatureClickHandler",
                "GraphicExtension",
                "Map",
                "QuickZoom",
                "RAMP",
                "BaseTool",
                "Dictionary",
                "FunctionMangler",
                "PopupManager",
                "Bootstrapper"
            ],
            "module": "Utils",
            "namespace": "",
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 11,
            "description": "A set of functions used by at least one module in this project. The functions\nare generic enough that they may become useful for other modules later or functions\nthat are shared amongst multiple modules should be added here.\n\n*__NOTE__: None of these functions require the global configuration object. (i.e. they\nare not exclusive to RAMP). For functions that depend on the global configuration\nobject, place them in ramp.js.*",
            "static": 1,
            "uses": [
                "dojo/_base/array",
                "dojo/_base/lang",
                "dojo/topic",
                "dojo/Deferred"
            ]
        },
        "RAMPStarter": {
            "name": "RAMPStarter",
            "shortname": "RAMPStarter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\RAMP-starter.js",
            "line": 9,
            "description": "RAMPStarter class.\nPerforms initial configuration of the dojo config object specifying path to the RAMP modules, detecting locale, and loading the {{#crossLink \"Bootstrapper\"}}{{/crossLink}} module.\npipe the locale to dojo.",
            "static": 1
        },
        "Bootstrapper": {
            "name": "Bootstrapper",
            "shortname": "Bootstrapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "RAMP",
            "namespace": "",
            "file": "src\\js\\RAMP\\bootstrapper.js",
            "line": 10,
            "description": "Bootstrapper class.\nStarting point of RAMP, RAMP modules are loaded here and mapped to a function parameter\nPhase X?: For mobile support, there can be a different mobileBootstrapper with only the mobile modules loaded",
            "static": 1,
            "uses": [
                "dojo/parser",
                "dojo/on",
                "dojo/topic",
                "dojo/request/script",
                "dojo/request/xhr",
                "Map",
                "Basemapselector",
                "Maptips",
                "Datagrid",
                "Navigation",
                "FilterManager",
                "BookmarkLink",
                "Url",
                "FeatureHighlighter",
                "Ramp",
                "GlobalStorage",
                "GUI",
                "EventManager",
                "AdvancedToolbar",
                "Util",
                "Prototype",
                "FunctionMangler"
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\js\\RAMP\\Modules\\advancedToolbar.js",
            "line": 68,
            "description": "Initiates additional UI components of the widget, setting listeners and other stuff.",
            "itemtype": "method",
            "name": "ui.init",
            "access": "private",
            "tagname": "",
            "class": "AdvancedToolbar",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\advancedToolbar.js",
            "line": 153,
            "description": "Deactivates all the tools. Used when closing the Advanced toolbar or when another tool is being activated.",
            "itemtype": "method",
            "name": "deactivateAll",
            "params": [
                {
                    "name": "except",
                    "description": "A tool module that should not be deactivated.",
                    "type": "Tool"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AdvancedToolbar",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\basemapSelector.js",
            "line": 68,
            "description": "Initiates additional UI components of the widget, setting listeners and registering the popup functionality",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "itself",
                "type": "Object"
            },
            "class": "BaseMapSelector",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\basemapSelector.js",
            "line": 122,
            "description": "Initializes functions that publish events.",
            "itemtype": "method",
            "name": "initTopics",
            "access": "private",
            "tagname": "",
            "class": "BaseMapSelector",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\basemapSelector.js",
            "line": 142,
            "description": "Initializes class listeners.",
            "itemtype": "method",
            "name": "initListeners",
            "access": "private",
            "tagname": "",
            "class": "BaseMapSelector",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 129,
            "description": "A dictionary mapping names (String) to query parameter (String) of the URL. The query parameter is\nwhat ends up in the url. The key can be any arbitrary name (best to name them to describe the query\nparameter).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "parameters",
            "type": "{Object}",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 140,
            "description": "A dictionary mapping names (String) to anchors (String) used at the end of the URL.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "anchors",
            "type": "{Object}",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 149,
            "description": "A dictionary containing layer id (String) as key and layer visibility (boolean) as value",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "layerVisibility",
            "type": "{Object}",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 158,
            "description": "A dictionary containing layer id (String) as key and bounding box visibility (boolean) as value",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "boundingBoxVisibility",
            "type": "{Object}",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 167,
            "description": "A dictionary with the layer id as key, and the transparency as value.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "layerTransparency",
            "type": "{Object}",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 177,
            "description": "Initiates additional UI components of the widget, setting listeners and other stuff.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 260,
            "description": "Update the parameter dictionary with the new values for the parameter. If paramObj is set to null,\nessentially removes the given paramKey from the URL.",
            "itemtype": "method",
            "name": "addParameter",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "paramKey",
                    "description": "the parameter (e.g. extent) that was changed",
                    "type": "String"
                },
                {
                    "name": "paramObj",
                    "description": "an object representing data that can be serialized into the query parameter\nof the URL (can be null, in which case the parameter will NOT be included in the URL)",
                    "type": "Object"
                }
            ],
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 304,
            "description": "Updates the link displayed in the textbox. This function should be called whenever\none of the objects that are in the URL query is modified.",
            "itemtype": "method",
            "name": "updateURL",
            "access": "private",
            "tagname": "",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 354,
            "description": "Toggle the short/long link mode and change the label accordingly",
            "itemtype": "method",
            "name": "toggleShortLinkMode",
            "params": [
                {
                    "name": "value",
                    "description": "true - shortLinkMode; false - !shortlinkMore; undefined - toggle;",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 536,
            "description": "Instantiates a BookmarkLink. Subscribes to all the events that causes\nthe bookmark link to update (e.g. map extent change or feature layer visibility\nchange).",
            "itemtype": "method",
            "name": "init!~YUIDOC_LINE~! homePage a string denoting the name of the homePage (e.g. usually \"Default.aspx\" or \"index.html\")",
            "type": "String",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\bookmarkLink.js",
            "line": 550,
            "description": "Subscribe to map state changes so the URL displayed can be changed accordingly.\n SUBSCRIBES TO:\nmap \"extent-change\"\n  Updates URL when map extent changes\n\nEventManager.GUI.FULLSCREEN_CHANGE\n  Updates URL when map goes into fullscreen mode\n\nEventManager.GUI.TAB_SELECTED\n  Updates URL when tabs are selected\n\nEventManager.GUI.PANEL_CHANGE\n  Updates URL when panel opens/closes\n\nEventManager.BasemapSelector.BASEMAP_CHANGED\n  Updates URL when basemap changed\n\n* ================================================================\nSubscribe to updates\n================================================================\nTo include more information into the query string, do not get the information\ndirectly from the object/module of interest, but rather make it publish an\nevent with data to include and subscribe to this event here.",
            "itemtype": "method",
            "name": "subscribeAndUpdate",
            "access": "private",
            "tagname": "",
            "class": "BookmarkLink",
            "module": "RAMP",
            "submodule": "BookmarkLink"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 85,
            "description": "Name of the attribute used to store the oid\nin the details and zoomTo buttons",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "featureOidField",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 94,
            "description": "Name of the attribute used to store the feature url\nin the details and zoomTo buttons",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "featureUrlField",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 109,
            "description": "The jquery table",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "oTable",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 131,
            "description": "Total number of features in all the visible layers on the map",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "totalRecords",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 140,
            "description": "creates a datagrid row that has the following features:\nhighlight for a give graphic\nun-highlight\nscroll to for a give graphic",
            "itemtype": "method",
            "name": "createRowPrototype",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "cssClass",
                    "description": "the style that highlights the row.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an object containing features of a datagrid row",
                "type": "Object"
            },
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 169,
            "description": "Navigate to the page the row is in and scroll to it. Returns true\nif the row exists in the datagrid, false otherwise.",
            "itemtype": "method",
            "name": "navigateToRow",
            "return": {
                "description": "A value indicating is the navigation is successful",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 206,
            "description": "Finds a row node corresponding to the given graphic object.",
            "itemtype": "method",
            "name": "refresh",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "} A row node that displays graphic information. If none found, returns an object with empty jNode.",
                "type": "Node: jObject, page: number"
            },
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 227,
            "description": "Finds a row node corresponding to the given graphic object.",
            "itemtype": "method",
            "name": "getNode",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "} A row node that displays graphic information. If none found, returns an object with empty jNode.",
                "type": "Node: jObject, page: number"
            },
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 238,
            "description": "Highlights the given graphic object using the specified cssClass.",
            "itemtype": "method",
            "name": "activate",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 255,
            "description": "Removes a specified cssClass from a given graphic object in the data grid",
            "itemtype": "method",
            "name": "deactivate",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 293,
            "description": "Generates a data grid row data with a checkbox to be used in template",
            "itemtype": "method",
            "name": "generateToggleButtonDataForTemplate",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the generated row data object.",
                "type": "String"
            },
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 373,
            "description": "Creates a Data table based on the grid configuration specified in the application config object. See http://www.datatables.net/usage/columns  for addition information on config parameters.",
            "itemtype": "method",
            "name": "createDatatable",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 494,
            "description": "Initialize tooltips for the data grid",
            "itemtype": "method",
            "name": "initTooltips",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 522,
            "description": "Adds event-handling for buttons inside the data grid's row elements (i.e 'Details', 'Zoom To' buttons)",
            "itemtype": "method",
            "name": "setButtonEvents",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 699,
            "description": "Apply's or removes the scrollbar from the data grid based on the height of its container.",
            "itemtype": "method",
            "name": "initScrollListeners",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 739,
            "description": "Highlights the row according to the graphic stored in the event. Sets the hightlightRow variable to the graphic object inside the sent event",
            "itemtype": "method",
            "name": "highlightrowShow",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "A thrown event that contains a graphic object inside the grid",
                    "type": "Object"
                }
            ],
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 757,
            "description": "Un-highlights the row that is currently highlighted",
            "itemtype": "method",
            "name": "highlightrowHide",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 769,
            "description": "Stores the graphic in the given event in the variable zoomlightRow",
            "itemtype": "method",
            "name": "zoomlightrowShow",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "A thrown event that contains a graphic object inside the grid",
                    "type": "Object"
                }
            ],
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 780,
            "description": "De-activates the row stored in zoomlightRow",
            "itemtype": "method",
            "name": "zoomlightrowHide",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 790,
            "description": "Registers event handlers for following events:\ndatagrid/highlightrow-show\ndatagrid/zoomlightrow-show\ndatagrid/zoomlightrow-hide",
            "itemtype": "method",
            "name": "initUIListeners",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 809,
            "params": [
                {
                    "name": "state",
                    "description": "indicates if button is disabled or not; true - disabled;",
                    "type": "Boolean"
                },
                {
                    "name": "loaded",
                    "description": "indicates if the selected dataset is already loaded; it's assumed to be loading otherwise",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1027,
            "description": "The constructor method for the data grid. Adds the grid's panel to the UI, adds the data rows, and creates all event triggers",
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1075,
            "description": "Indicates that the Data grid is fully rendered",
            "itemtype": "method",
            "name": "isReady",
            "return": {
                "description": "_isReady flag indicating the render status of the data grid",
                "type": "Boolean"
            },
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1084,
            "description": "Adjusts the width of the datagrid panel to accommodate the scrollbar.",
            "itemtype": "method",
            "name": "adjustPanelWidth",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1093,
            "description": "publishes the subPanel_Capture event to the GUI class",
            "itemtype": "method",
            "name": "capturePanel",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1101,
            "description": "Caches the sorted data from datatables for feature click events to consume.  Builds featureToPage as a\nmapping of (layerName,featureId) => page where layerName and featureId are strings and page is a zero based int.",
            "itemtype": "method",
            "name": "cacheSortedData",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1124,
            "description": "Returns the config Object for the given featureLayerUrl",
            "itemtype": "method",
            "name": "getGridConfig",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "grid config",
                "type": "Object"
            },
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1135,
            "description": "A handler that handlers the Enter key press and Click mouse event of the data grid.\nIt is actually a binder that binds the key / mouse event to a handler specified.\nThis is wired up to grid cells in the bootstrapper to achieve click/keypress functions",
            "itemtype": "method",
            "name": "handleGridEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "the event object",
                    "type": "Event"
                },
                {
                    "name": "callback",
                    "description": "the callback function",
                    "type": "Function"
                }
            ],
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1151,
            "description": "Gets all layer data in the current map extent that are visible, and put the data into the data grid.",
            "itemtype": "method",
            "name": "applyExtentFilter",
            "params": [
                {
                    "name": "d",
                    "description": "",
                    "type": "A Deferred object"
                }
            ],
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1211,
            "description": "Given a map feature, return a data object used to represent the feature in the datagrid.",
            "itemtype": "method",
            "name": "getDataObject",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "feature",
                    "description": "the feature needs to be represented in the datagrid\nreturn {Array} an array representing the data the given feature contains.",
                    "type": "Object"
                }
            ],
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1259,
            "description": "Populate the datagrid with data in visibleFeatures",
            "itemtype": "method",
            "name": "fetchRecords",
            "params": [
                {
                    "name": "visibleFeatures",
                    "description": "a dictionary mapping\nservice url to an array of feature objects",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1308,
            "description": "Returns the graphic object of a feature layer which is contained in the given buttonNode.",
            "itemtype": "method",
            "name": "getGraphicFromButton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "buttonNode",
                    "description": "the node containing the feature layer",
                    "type": "JObject"
                }
            ],
            "return": {
                "description": "the graphic object of the feature layer.",
                "type": "Object"
            },
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1331,
            "description": "Binding event handling for events:\nfilterManager/layer-visibility-toggled\ndatagrid/applyExtentFilter",
            "itemtype": "method",
            "name": "initListeners",
            "access": "private",
            "tagname": "",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagrid.js",
            "line": 1382,
            "description": "Initialize the datagrid. must be called before any properties can be accessed.",
            "itemtype": "method",
            "name": "init",
            "class": "Datagrid",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 45,
            "description": "Publishes new events when zoomCancel event happens.  Following events are published:\nhighlighter/zoomlight-hide\ndatagrid/zoomlightrow-hide",
            "itemtype": "method",
            "name": "onZoomCancel",
            "class": "DatagridClickHandler",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 59,
            "description": "This function is called whenever the \"Details\" button is clicked in the datagrid.",
            "itemtype": "method",
            "name": "onDetailSelect",
            "params": [
                {
                    "name": "buttonNode",
                    "description": "the \"Details\" button node",
                    "type": "JObject"
                },
                {
                    "name": "selectedGraphic",
                    "description": "{esri/Graphic} the graphic object associated with the entry in the datagrid",
                    "type": "Object"
                }
            ],
            "class": "DatagridClickHandler",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 135,
            "description": "This function is called whenever the \"Details\" button is deselected (either by the user click on\nanother \"Details\" button, clicking on another point, or by clicking on an already highlighted\n\"Details\" button).",
            "itemtype": "method",
            "name": "onDetailDeselect",
            "class": "DatagridClickHandler",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 154,
            "description": "This function is called whenever the user clicks on the \"Zoom To\" button.",
            "itemtype": "method",
            "name": "onZoomTo",
            "params": [
                {
                    "name": "currentExtent",
                    "description": "the current extent of the map",
                    "type": "Esri/geometry/Extent"
                },
                {
                    "name": "zoomToGraphic",
                    "description": "graphic object of the feature to zoom to",
                    "type": "Object"
                }
            ],
            "class": "DatagridClickHandler",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 202,
            "description": "This function is called whenever the user clicks on the \"Zoom Back\" button.",
            "itemtype": "method",
            "name": "onZoomBack",
            "class": "DatagridClickHandler",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\datagridClickHandler.js",
            "line": 217,
            "description": "This function is called whenever the user deselects the \"Zoom To\" button (either by the\nuser clicking on another point on the map, or by clicking on another \"Zoom To\" button)",
            "itemtype": "method",
            "name": "onZoomCancel",
            "class": "DatagridClickHandler",
            "module": "RAMP",
            "submodule": "Datagrid"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 24,
            "description": "Published whenever the \"eye\" button for a layer is clicked",
            "itemtype": "event",
            "name": "FilterManager.LAYER_VISIBILITY_TOGGLED",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "checked",
                            "description": "true if the \"eye\" button is checked, false otherwise",
                            "type": "Boolean"
                        },
                        {
                            "name": "node",
                            "description": "the input dom node that represents the checkbox",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FilterManager",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 35,
            "description": "Published each time the transparency of a layer is modified.",
            "itemtype": "event",
            "name": "FilterManager.LAYER_TRANSPARENCY_CHANGED",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "layerId",
                            "description": "the id of the layer",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "the value of the slider",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "FilterManager",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 46,
            "description": "Published whenever the \"box\" button for a layer is clicked",
            "itemtype": "event",
            "name": "FilterManager.BOX_VISIBILITY_TOGGLED",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "checked",
                            "description": "true if the \"box\" button is checked, false otherwise",
                            "type": "Boolean"
                        },
                        {
                            "name": "node",
                            "description": "the input dom node that represents the checkbox",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FilterManager",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 57,
            "description": "Published whenever the layer list is rearranged",
            "itemtype": "event",
            "name": "FilterManager.SELECTION_CHANGED",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "the layer Id",
                            "type": "String"
                        },
                        {
                            "name": "index",
                            "description": "index of the layer that moved.  index is relative to the control,\nnot the layer stack in the map",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "class": "FilterManager",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 69,
            "description": "Published after the ui for the filter manager finishes initializing.",
            "itemtype": "event",
            "name": "FilterManager.UI_COMPLETE",
            "class": "FilterManager",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 78,
            "description": "Tells the filter manager to toggle a layer on or off",
            "itemtype": "event",
            "name": "FilterManager.TOGGLE_LAYER_VISIBILITY [subscribed]",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "layerId",
                            "description": "the name of the layer to toggle",
                            "type": "String"
                        },
                        {
                            "name": "state",
                            "description": "true if the layer should be visible, false otherwise",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "FilterManager",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 89,
            "description": "Tells the filter manager to toggle a layer on or off",
            "itemtype": "event",
            "name": "FilterManager.TOGGLE_BOX_VISIBILITY [subscribed]",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "layerId",
                            "description": "the name of the layer to toggle",
                            "type": "String"
                        },
                        {
                            "name": "state",
                            "description": "true if the layer should be visible, false otherwise",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "FilterManager",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 102,
            "description": "Fires whenever the extended grid button is clicked",
            "itemtype": "event",
            "name": "GUI.DATAGRID_EXPAND",
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 110,
            "description": "Fires whenever a tab has been deselected in the main panel",
            "itemtype": "event",
            "name": "gui.TAB_DESELECTED",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "the id of the deselected tab",
                            "type": "String"
                        },
                        {
                            "name": "tabName",
                            "description": "the name of the deselected tab",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 121,
            "description": "Fires whenever a tab has been selected in the main panel",
            "itemtype": "event",
            "name": "gui.TAB_SELECTED",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "the id of the selected tab",
                            "type": "String"
                        },
                        {
                            "name": "tabName",
                            "description": "the name of the selected tab",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 132,
            "description": "Published each time the subpanel opens/closes",
            "itemtype": "event",
            "name": "gui.SUBPANEL_CHANGE",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "visible",
                            "description": "true if the subpanel is opened, false otherwise",
                            "type": "Boolean"
                        },
                        {
                            "name": "origin",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "container",
                            "description": "jQuery reference to the sub-panel container",
                            "type": "JObject"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 144,
            "description": "Published each time the panel opens/closes",
            "itemtype": "event",
            "name": "gui.PANEL_CHANGE",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "visible",
                            "description": "true if the panel is opened, false otherwise",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 154,
            "description": "Published each time the help panel opens or closes.",
            "itemtype": "event",
            "name": "gui.HELP_PANEL_CHANGE",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "visible",
                            "description": "true if the help panel is opened, false if the help panel is closed",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 164,
            "description": "Published each time fullscreen is toggled",
            "itemtype": "event",
            "name": "gui.FULLSCREEN_CHANGE",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "fullscreen",
                            "description": "true if fullscreen is on, false if fullscreen is off.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 174,
            "description": "Published each time the layout changes.",
            "itemtype": "event",
            "name": "gui.LAYOUT_CHANGE",
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 183,
            "description": "Toggles the main panel (i.e. collapses it if was expanded, and expands it if it was collapsed)",
            "itemtype": "event",
            "name": "gui.PANEL_TOGGLE [subscribed]",
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 191,
            "description": "Opens the subpanel",
            "itemtype": "event",
            "name": "gui.SUBPANEL_OPEN [subscribed]",
            "params": [
                {
                    "name": "attr",
                    "description": "Settings for the SubPanel",
                    "type": "SubPanelSettings"
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 200,
            "description": "Closes the sub panel",
            "itemtype": "event",
            "name": "gui.SUBPANEL_CLOSE [subscribed]",
            "params": [
                {
                    "name": "origin",
                    "description": "the name of the module that requested to close the subPanel (e.g. \"filterManager\")",
                    "type": "String"
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 209,
            "description": "Moves the panel up DOM hierarchy next to the sidePanel, or to other target",
            "itemtype": "event",
            "name": "gui.SUBPANEL_DOCK [subscribed]",
            "params": [
                {
                    "name": "origin",
                    "description": "the name of the module that requested to dock the subPanel (e.g. \"filterManager\")",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "where to move the subPanel; if not supplied; sidePanel is used",
                    "type": "JNode"
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 219,
            "description": "Attaches subPanel node to the module that calls it in the DOM hierarchy",
            "itemtype": "event",
            "name": "gui.SUBPANEL_CAPTURE [subscribed]",
            "params": [
                {
                    "name": "consumeOrigin",
                    "description": ""
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 228,
            "description": "Toggles the fullscreen",
            "itemtype": "event",
            "name": "gui.TOGGLE_FULLSCREEN [subscribed]",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "expand",
                            "description": "true if we should go into fullscreen mode, false if we wish to\ncollapse to normal mode. If undefined, it toggles the fullscreen (i.e. make it fullscreen\nif it was not, make it collapse to regard mode if it was fullscreen).",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 240,
            "description": "Published each time the Add Layer panel opens or closes.",
            "itemtype": "event",
            "name": "gui/add-layer-panel-change",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "visible",
                            "description": "true if the AddLayer panel is opened, false if the AddLayer panel is closed",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 250,
            "description": "Published each time a toolbar section / widget is opened. Used to close other toolbar sections / widgets.",
            "itemtype": "event",
            "name": "gui/toolbar-section-open",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "id of the source section / widget",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 260,
            "description": "Published each time a toolbar section / widget is closed.",
            "itemtype": "event",
            "name": "gui/toolbar-section-close",
            "params": [
                {
                    "name": "evt",
                    "description": "the event Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "id of the source section / widget",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 270,
            "description": "Published when the gui module has completely finished rendering the UI.\nThe bootstrapper should wait for this event to fire before initializing map.",
            "class": "GUI",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 278,
            "description": "Permanently highlights a given feature on the map; display an interactive tooltip for this feature; reduces opacity of the `graphicGroup` layers.\nEven when the user moves the cursor away, the feature stays highlighted; tooltip stays put.\nOnly one feature can be highlighted like this at a time.",
            "itemtype": "event",
            "name": "featureHighlighter.HIGHLIGHT_SHOW [subscribed]",
            "params": [
                {
                    "name": "eventAttr",
                    "description": "ESRI feature click even attributes",
                    "type": "Object"
                }
            ],
            "class": "FeatureHighlighter",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 289,
            "description": "Dehighlights a currently highlighted feature on the map and restores opacity of the rest of the layers;\nhides the interactive tooltip.",
            "itemtype": "event",
            "name": "featureHighlighter.HIGHLIGHT_HIDE [subscribed]",
            "class": "FeatureHighlighter",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 298,
            "description": "Temporarilly highlights (hoverlights) a given feature on the map. Intended to be dehighlighted when the user moves the cursor away; to do that, publish HOVERLIGHT_HIDE event.\nEffect is only visible when another feature is already permanently highlighted.\nOnly one feature can be highlighted like this at a time.",
            "itemtype": "event",
            "name": "featureHighlighter.HOVERLIGHT_SHOW [subscribed]",
            "params": [
                {
                    "name": "eventAttr",
                    "description": "ESRI feature click even attributes",
                    "type": "Object"
                }
            ],
            "class": "FeatureHighlighter",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 309,
            "description": "Dehighlights a currently highlighted (hoverlighted) feature on the map without restoring opacity of the rest of the layers;",
            "itemtype": "event",
            "name": "featureHighlighter.HOVERLIGHT_HIDE [subscribed]",
            "class": "FeatureHighlighter",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 317,
            "description": "Temporarilly highlights (zoomlightes) a given feature on the map.\nIntended to be dehighlighted when the user makes an action like panning or zooming the map, publish ZOOMLIGHT_HIDE event.\nDisplays a temporary tooltip for this feature;\nOnly one feature can be highlighted (zoomlighted) like this at a time.",
            "itemtype": "event",
            "name": "featureHighlighter.ZOOMLIGHT_SHOW [subscribed]",
            "params": [
                {
                    "name": "eventAttr",
                    "description": "ESRI feature click even attributes",
                    "type": "Object"
                }
            ],
            "class": "FeatureHighlighter",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 329,
            "description": "Dehighlights a currently highlighted (zoomlighted) feature on the map;\nRemoves the tooltip.\nRestores the opacity of the graphicGroup layers if no feature is highlighted at present.",
            "itemtype": "event",
            "name": "featureHighlighter.ZOOMLIGHT_HIDE [subscribed]",
            "class": "FeatureHighlighter",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 341,
            "description": "Displays a simple, temporary maptip, positioning it over the `target` jObject; the content of the maptip is build from the\ncontents of the `graphic` object and the mapTip template specified in the config object.",
            "itemtype": "event",
            "name": "maptips.SHOW [subscribed]",
            "params": [
                {
                    "name": "target",
                    "description": "a node/svg object the user hovered over",
                    "type": "JObject"
                },
                {
                    "name": "graphic",
                    "description": "ESRI graphic object belonging to the target",
                    "type": "Object"
                }
            ],
            "class": "Maptips",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 352,
            "description": "Displays an permanent, interactive maptip with a close button, positioning it over the `target` jObject; the content of the maptip is build from the\ncontents of the `graphic` object and the mapTip template specified in the config object.\nThe maptip will not be shown if it's covered by the open {{#crossLink \"SubPanel\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "maptips.SHOW_INTERACTIVE [subscribed]",
            "params": [
                {
                    "name": "target",
                    "description": "a node/svg object the user hovered over",
                    "type": "JObject"
                },
                {
                    "name": "graphic",
                    "description": "ESRI graphic object belonging to the target",
                    "type": "Object"
                }
            ],
            "class": "Maptips",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 363,
            "description": "Is fired when an interactive maptip is shown and {{#crossLink \"Maptip\"}}{{/crossLink}} detects if the maptip is hidden behind the\n{{#crossLink \"SubPanel\"}}{{/crossLink}} and extent change is needed. Sets the `scroll` payload attribute to true if the extent change is not needed\nand the {{#crossLink \"Datagrid\"}}{{/crossLink}} should scroll to the currently highlighted row.",
            "itemtype": "event",
            "name": "maptips.EXTENT_CHANGE [subscribed]",
            "params": [
                {
                    "name": "scroll",
                    "description": "indicates if the {{#crossLink \"Datagrid\"}}{{/crossLink}} should scroll to the currently highlighted row",
                    "type": "Boolean"
                }
            ],
            "class": "Maptips",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 373,
            "description": "Repositions the interactive tooltip that is already displayed when the user pans or zooms the map, or the map is otherwise\nadjusted. If the tooltip is hidden from the view by the {{#crossLink \"SubPanel\"}}{{/crossLink}} or the edge of the map container,\nit is hidden from the page.",
            "itemtype": "event",
            "name": "maptips.REPOSITION_INTERACTIVE [subscribed]",
            "params": [
                {
                    "name": "offset",
                    "description": "New tooltip offset relative to the shape it's attached too; when zooming, the shape changes its size and the\noffset needs to be recalculated to keep the tooltip in relative center",
                    "type": "Number"
                }
            ],
            "class": "Maptips",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 390,
            "description": "Indicates that all the map layers are loaded.",
            "itemtype": "event",
            "name": "RampMap.ALL_LAYERS_LOADED",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 399,
            "description": "Centers the map at the given point.",
            "itemtype": "event",
            "name": "RampMap.CENTER_AT [subscribed]",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "y",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "spatialReference",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "wkid",
                                    "description": "",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 412,
            "description": "Center and zoom the map to the given point.",
            "type": "{String}",
            "itemtype": "event",
            "name": "RampMap.CENTER_AND_ZOOM [subscribed]",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "graphic",
                            "description": "the graphic object to center the map on",
                            "type": "Esri/graphic"
                        },
                        {
                            "name": "level",
                            "description": "the zoom level",
                            "type": "Integer"
                        },
                        {
                            "name": "callback",
                            "description": "the function to call after the center and zoom action is complete",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 425,
            "description": "Changes the current extent of the map.",
            "itemtype": "event",
            "name": "RampMap.SET_EXTENT [subscribed]",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "extent.xmin",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "extent.ymin",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "extent.xmax",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "extent.ymax",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "callback",
                            "description": "the function to call after the extent change is complete",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 439,
            "description": "Republishes a standard ESRI map click event 'click'.",
            "itemtype": "event",
            "name": "RampMap.CLICK",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 447,
            "description": "Fires when the reorder of the layers in the layer managers has completed finished.",
            "itemtype": "event",
            "name": "RampMap.REORDER_END",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 455,
            "description": "Republishes a standard ESRI map compnent event `update-end`.",
            "itemtype": "event",
            "name": "RampMap.UPDATE_END",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 463,
            "description": "Republishes a standard ESRI map compnent event `extent-change`.",
            "itemtype": "event",
            "name": "RampMap.EXTENT_CHANGE",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 471,
            "description": "Republishes a standard ESRI map compnent event `zoom-start`.",
            "itemtype": "event",
            "name": "RampMap.ZOOM_START",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 479,
            "description": "Republishes a standard ESRI map compnent event `zoom-end`.",
            "itemtype": "event",
            "name": "RampMap.ZOOM_END",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 487,
            "description": "Republishes a standard ESRI map compnent event `pan-start`.",
            "itemtype": "event",
            "name": "RampMap.PAN_START",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 495,
            "description": "Republishes a standard ESRI map compnent event `pan-end`.",
            "itemtype": "event",
            "name": "RampMap.PAN_END",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 503,
            "description": "Fires when a layer is added by a user",
            "itemtype": "event",
            "name": "RampMap.ADD_LAYER",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 511,
            "description": "Fires when a layer added by a user is ready to view",
            "itemtype": "event",
            "name": "RampMap.ADD_LAYER_READY",
            "class": "RampMap",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 521,
            "description": "Fires whenever the basemap changes",
            "itemtype": "event",
            "name": "baseMapSelector/basemap-changed",
            "params": [
                {
                    "name": "evt",
                    "description": "the event object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "the id of the selected basemap",
                            "type": "String"
                        },
                        {
                            "name": "title",
                            "description": "the title of the selected basemap",
                            "type": "String"
                        },
                        {
                            "name": "cssStyle",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "BaseMapSelector",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 533,
            "description": "Fires after the basemap selector finished updating its UI (on page load)",
            "itemtype": "event",
            "name": "baseMapSelector/UIComplete",
            "params": [
                {
                    "name": "evt",
                    "description": "the event object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "the title of the basemap that is selected",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "BaseMapSelector",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 544,
            "description": "Changes the selected basemap",
            "itemtype": "event",
            "name": "baseMapSelector/toggle [subscribed]",
            "params": [
                {
                    "name": "evt",
                    "description": "the event object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "the id of the basemap that is to be selected",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "BaseMapSelector",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 556,
            "description": "Applies a spatial filter to the datagrid (i.e. only visible points in the current\nextent will be displayed in the datagrid)",
            "itemtype": "event",
            "name": "datagrid.APPLY_EXTENT_FILTER [subscribed]",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 565,
            "description": "Fires when the table has finished drawing",
            "itemtype": "event",
            "name": "datagrid.DRAW_COMPLETE",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 572,
            "description": "Fires when the extent-filter has finished updating",
            "itemtype": "event",
            "name": "datagrid.EXTENT_FILTER_END",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 579,
            "description": "Highlights the row corresponding to the given `graphic` object of the selected feature.",
            "itemtype": "event",
            "name": "datagrid.HIGHLIGHTROW_SHOW",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "graphic",
                            "description": "ESRI graphic object corresponding to the selected feature",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 588,
            "description": "Dehighlights the currently highlighted row.",
            "itemtype": "event",
            "name": "datagrid.HIGHLIGHTROW_HIDE",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 594,
            "description": "Zoomlights the row corresponding to the given `graphic` object of the zoomed to feature.",
            "itemtype": "event",
            "name": "datagrid.ZOOMLIGHTROW_SHOW",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "graphic",
                            "description": "ESRI graphic object corresponding to the zoomed to feature",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 603,
            "description": "Dehighlights the currently zoomlighted row.",
            "itemtype": "event",
            "name": "datagrid.ZOOMLIGHTROW_HIDE",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 614,
            "description": "Published whenever the user clicks on the pan buttons.",
            "itemtype": "event",
            "name": "Navigation.PAN",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 621,
            "description": "Published whenever the user tries to zoom using the arrow buttons.",
            "itemtype": "event",
            "name": "Navigation.ZOOM_STEP",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 628,
            "description": "Published whenever the user tries to zoom using the slider.",
            "itemtype": "event",
            "name": "Navigation.ZOOM",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 635,
            "description": "Published whenever the user clicks on the full extent button in the\nnavigation widget.",
            "itemtype": "event",
            "name": "Navigation.FULL_EXTENT",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 645,
            "description": "Published whenever the user clicks on the get link button in the\nmap toolbar.",
            "itemtype": "event",
            "name": "bookmark.GETLINK_PANEL_CHANGED",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\eventManager.js",
            "line": 655,
            "description": "Published whenever the user clicks on the get link button in the\nmap toolbar.",
            "itemtype": "event",
            "name": "advanced.ADVANCED_PANEL_CHANGED",
            "class": "Datagrid",
            "module": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureClickHandler.js",
            "line": 47,
            "description": "This function is called whenever the feature on the map is clicked/selected by the user.\nPublish the \"Gui/subPanelOpen\" message to indicate a feature has been selected. Panel content\nand Panel event handler information is passed in as the additional object for the event handler.",
            "itemtype": "method",
            "name": "onFeatureSelect",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "graphic",
                            "description": "ESRI graphic object",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FeatureClickHandler",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureClickHandler.js",
            "line": 97,
            "description": "This function is called whenever the \"Details\" button is deselected (either by the user click on\nanother \"Details\" button, clicking on another point, or by clicking on an already highlighted\n\"Details\" button, or clicking somewhere on the map where is no features present).",
            "itemtype": "method",
            "name": "onFeatureDeselect",
            "class": "FeatureClickHandler",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureClickHandler.js",
            "line": 110,
            "description": "This function is called whenever the user hovers over a feature on the map when another feature already has been selected.",
            "itemtype": "method",
            "name": "onFeatureMouseOver",
            "params": [
                {
                    "name": "evt",
                    "description": "[description]",
                    "type": "Object",
                    "props": [
                        {
                            "name": "graphic",
                            "description": "ESRI graphic object that is being hovered over",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FeatureClickHandler",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureClickHandler.js",
            "line": 122,
            "description": "This function is called whenever the user moves the mouse away from a feature being hovered over.",
            "itemtype": "method",
            "name": "onFeatureMouseOut",
            "params": [
                {
                    "name": "evt",
                    "description": "[description]",
                    "type": "Object",
                    "props": [
                        {
                            "name": "graphic",
                            "description": "ESRI graphic object that is moved away from",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FeatureClickHandler",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 67,
            "description": "Creates a copy of the given graphic object.",
            "itemtype": "method",
            "name": "cloneGraphic",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "graphic",
                    "description": "Graphic object to clone",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "clone A cloned Graphic object"
            },
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 95,
            "description": "Sorts and groups the svg representation of the map layers on the page to make highlighting work.\nGroup all the feature layers and create new groups for highlight, zoomlight, and hoverlight layers.",
            "itemtype": "method",
            "name": "sortLayers",
            "access": "private",
            "tagname": "",
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 122,
            "description": "Clones the Graphic object from the event, adds it to the Highlight layer, and lowers the opacity of other map layers to make the cloned\nGraphic stand out.",
            "itemtype": "method",
            "name": "highlightGraphic",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventArg",
                    "description": "???",
                    "type": "Object"
                }
            ],
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 151,
            "description": "Clears the Highlight layer and restores the opacity of the map layers.",
            "itemtype": "method",
            "name": "highlightGraphicHide",
            "access": "private",
            "tagname": "",
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 172,
            "description": "Clones the Graphic object from the event, adds it to the Hoverlight layer.",
            "itemtype": "method",
            "name": "hoverLight",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventArg",
                    "description": "???",
                    "type": "Object"
                }
            ],
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 189,
            "description": "Clears the Hoverlight layer.",
            "itemtype": "method",
            "name": "hoverLightHide",
            "access": "private",
            "tagname": "",
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 199,
            "description": "Clones the Graphic object from the event, adds it to the Zoomlight layer, and lowers the opacity of other map layers to make the cloned\nGraphic stand out.",
            "itemtype": "method",
            "name": "zoomLight",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventArg",
                    "description": "???",
                    "type": "Object"
                }
            ],
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 227,
            "description": "Clears the Zoomlight layer and restores the opacity of the map layers if the Highlight layer is empty.",
            "itemtype": "method",
            "name": "zoomLightHide",
            "access": "private",
            "tagname": "",
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 246,
            "description": "If there a Graphic in the Highlihgh layer, resets it's bounding box and repositions an interactive maptip to match the top center of the\nboudning box of the highlighted graphic.",
            "itemtype": "method",
            "name": "repositionInteractive",
            "access": "private",
            "tagname": "",
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 271,
            "description": "Initiates various listeners for the class.",
            "itemtype": "method",
            "name": "initListeners",
            "access": "private",
            "tagname": "",
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\featureHighlighter.js",
            "line": 336,
            "description": "Initiates the FeatureHighlighter static class.",
            "itemtype": "method",
            "name": "init",
            "class": "FeatureHighlighter",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 164,
            "description": "Sets UI status of a layer presentation (checkbox and eye) according to the user action: select / de-select a layer.\npublishes event \"filterManager/box-visibility-toggled\" every time a layer status changed.\nThere should only be one eye and one global checkbox, but\nwe say checkbox\"es\" because jquery returns a list and it's\neasier to write a function that takes a list of checkboxes\nthan to write two functions, one to take a list and one to\ntake an individual checkbox",
            "itemtype": "method",
            "name": "setCheckboxEvents",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 302,
            "description": "initialize a tooltip for each layer, using the layer name.",
            "itemtype": "method",
            "name": "initTooltips",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 328,
            "description": "Adjusts UI layout according to a layer event.",
            "itemtype": "method",
            "name": "setButtonEvents",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 338,
            "description": "Changes the width of the layers pane to accommodate for the scrollbar if it's needed.",
            "itemtype": "method",
            "name": "adjustPaneWidth",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 346,
            "description": "Changes the state of the expand all control if all the nodes are expanded.",
            "itemtype": "method",
            "name": "adjustExpandAllButtonState",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 513,
            "description": "Adjusts filter style according to the scroll action on the layers.",
            "itemtype": "method",
            "name": "initScrollListeners",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 529,
            "description": "Sets all the events to handle layer reordering with both mouse and keyboard.",
            "itemtype": "method",
            "name": "setLayerReorderingEvents",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 683,
            "description": "Initiates a listener to handle tab deselected event",
            "itemtype": "method",
            "name": "initListeners",
            "access": "private",
            "tagname": "",
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 698,
            "description": "Reads the application configuration and creates the legend and filter management widget",
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 711,
            "description": "Queries all map points on a given feature layer and returns their attributes",
            "itemtype": "method",
            "name": "_getFeatures",
            "params": [
                {
                    "name": "fl",
                    "description": "A feature layer to query",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of attributes from the designated feature layer",
                "type": "Object"
            },
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\filterManager.js",
            "line": 727,
            "description": "Grabs all distinct values of the given field from a featureLayer.",
            "itemtype": "method",
            "name": "_getField",
            "params": [
                {
                    "name": "fl",
                    "description": "A feature layer to query",
                    "type": "Object"
                },
                {
                    "name": "field",
                    "description": "The field (or column) to query in the feature layer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "deferred A deferred object which will resolve to an array of unique values",
                "type": "Object"
            },
            "class": "FilterManager",
            "module": "RAMP",
            "submodule": "FilterManager"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\globalStorage.js",
            "line": 23,
            "description": "Returns a URL that points to the application configuration (JSON format) if it's hosted on a web service.\nThis is not required if the application has a JSON config file in the website's folder",
            "itemtype": "property",
            "name": "getConfigUrl",
            "type": "Object",
            "class": "GlobalStorage",
            "module": "RAMP",
            "submodule": "GlobalStorage"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\graphicExtension.js",
            "line": 48,
            "description": "Given a graphic object, returns the config object associated with the graphic's layer.",
            "itemtype": "method",
            "name": "getLayerConfig",
            "params": [
                {
                    "name": "graphic",
                    "description": "a graphic object or a feature object",
                    "type": "Esri/Graphic"
                }
            ],
            "return": {
                "description": "",
                "type": "Esri/Graphic"
            },
            "class": "GraphicExtension",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\graphicExtension.js",
            "line": 59,
            "description": "Returns the oid of the given graphic object",
            "params": [
                {
                    "name": "graphic",
                    "description": "",
                    "type": "Esri/Graphic"
                }
            ],
            "itemtype": "method",
            "name": "getOid",
            "class": "GraphicExtension",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\graphicExtension.js",
            "line": 70,
            "description": "Get popup content for a graphic (i.e. a point)\nThis logic is customized per project",
            "itemtype": "method",
            "name": "getTextContent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "graphic",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "found graphic object",
                "type": "Object"
            },
            "class": "GraphicExtension",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\graphicExtension.js",
            "line": 98,
            "description": "Returns the content of the name field of the provided graphic object",
            "itemtype": "method",
            "name": "getGraphicTitle",
            "params": [
                {
                    "name": "graphic",
                    "description": "a graphic object or a feature object",
                    "type": "Esri/Graphic"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "GraphicExtension",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 90,
            "description": "A name used to identify the subpanel being opened (e.g. \"Details\", \"Metadata\")",
            "itemtype": "property",
            "name": "panelName",
            "type": "{String}",
            "default": "\"\"",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 100,
            "description": "Title of the content to be displayed on the SubPanel (e.g. \"CESI Water Quality Indicators\")",
            "itemtype": "property",
            "name": "title",
            "type": "{String}",
            "default": "\"\"",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 109,
            "description": "The text inside the subpanel. Can be String or a jQuery object. All nodes sporting CSS class\n\".shorten-candidate\" are treated to the shortening procedure - long strings are curtailed, and [more/less] links are placed at their ends.",
            "itemtype": "property",
            "name": "content",
            "type": "{String | jObject}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 121,
            "description": "The node after which the panel will be inserted (e.g. node.find(\".layer-details\")).",
            "itemtype": "property",
            "name": "target",
            "type": "{jObject}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 130,
            "description": "The name of the module that requested to open the SubPanel (e.g. \"filterManager\"). Used for identification of the panel's loyalty.",
            "itemtype": "property",
            "name": "origin",
            "type": "{String}",
            "default": "\"\"",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 139,
            "description": "A unique id of the SubPanel. If none provided, a random one is generated. It is used to determine the animation and update function\nto run on content update.",
            "itemtype": "property",
            "name": "guid",
            "type": "{String}",
            "default": "\"\"",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 149,
            "description": "Indicates that the open SubPanel request is a content update to the already opened SubPanel.\nDoes not trigger any of the `doOn-` or `doAfter-` functions.\n\n__Use case:__ the uses clicks on the metadata button.\n1. A request to open a SubPanel is sent with only the title since the metadata content is not yet available\n2. Metadata is fetched from the server\n3. A second request to open a SubPanel is sent having `update` set to `true` and featuring the __same__ `guid` as the first request\n4. Only the content of the SubPanel is updated; no extra animations are triggered",
            "itemtype": "property",
            "name": "update",
            "type": "{Boolean}",
            "default": "false",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 165,
            "description": "The callback function when the panel starts the opening animation; also triggered by updating panel content; can be triggered many times.",
            "itemtype": "property",
            "name": "doOnOpen",
            "type": "{Function}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 174,
            "description": "The callback function when the panel finishes the opening animation; also triggered by updating panel content; can be triggered many times.",
            "itemtype": "property",
            "name": "doAfterOpen",
            "type": "{Function}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 183,
            "description": "The callback function when the panel starts the closing animation; also triggered by updating panel content; can be triggered many times.",
            "itemtype": "property",
            "name": "doOnHide",
            "type": "{Function}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 192,
            "description": "The callback function when the panel becomes hidden; also triggered by updating panel content; can be triggered many times.",
            "itemtype": "property",
            "name": "doAfterHide",
            "type": "{Function}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 201,
            "description": "The callback function when the panel is completely closed, its nodes destroyed; can be triggered only once in a lifespan of the panel.",
            "itemtype": "property",
            "name": "doOnDestroy",
            "type": "{Function}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 210,
            "description": "The callback function executed after the SubPanel content is updated.\n__Doesn't work correctly yet.__",
            "itemtype": "property",
            "name": "doAfterUpdate",
            "type": "{Function}",
            "default": "null",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 220,
            "description": "The target number of chars after which a content text node will be shortened.",
            "itemtype": "property",
            "name": "showChars",
            "type": "{Number}",
            "default": "170",
            "class": "SubPanelSettings",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 241,
            "description": "Indicates if the closing animation is under way.",
            "itemtype": "property",
            "name": "_closing",
            "access": "private",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 252,
            "description": "Holds a deferred that would destroy the panel after the closing animation completes. May be interrupted.",
            "itemtype": "property",
            "name": "_destroyDeferred",
            "type": "{Deferred}",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 262,
            "description": "SubPanel attributes",
            "itemtype": "property",
            "name": "_attr",
            "access": "private",
            "tagname": "",
            "default": "null",
            "type": "{SubPanelSettings}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 272,
            "description": "Indicates if the SubPanel is visible at the moment. Doesn't make the panel visible or invisible, just prevents animations on the content\nto run when it is set to `true`.",
            "itemtype": "property",
            "name": "_visible",
            "access": "private",
            "tagname": "",
            "default": "false",
            "type": "{Boolean}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 283,
            "description": "The outermost `div` of the SubPanel.",
            "itemtype": "property",
            "name": "container",
            "default": "null",
            "type": "{jObject}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 292,
            "description": "The inner `div` of the SubPanel. Closing and opening animations are run on this `div`.",
            "itemtype": "property",
            "name": "panel",
            "default": "null",
            "type": "{jQobject}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 301,
            "description": "`div` housing the content of the SubPanel, including its title.",
            "itemtype": "property",
            "name": "_subPanelContentDiv",
            "access": "private",
            "tagname": "",
            "default": "null",
            "type": "{jObject}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 311,
            "description": "Heading of the content in the SubPanel.",
            "itemtype": "property",
            "name": "_panelTitle",
            "access": "private",
            "tagname": "",
            "default": "null",
            "type": "{jObject}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 321,
            "description": "`div` housing the content of the SubPanel, excluding its title.",
            "itemtype": "property",
            "name": "_panelContentDiv",
            "access": "private",
            "tagname": "",
            "default": "null",
            "type": "{jObject}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 331,
            "description": "Default duration of the SubPanel animation in milliseconds.",
            "itemtype": "property",
            "name": "_animatePanelDuration",
            "access": "private",
            "tagname": "",
            "default": "0.5",
            "type": "{Number}",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 344,
            "description": "Apply the shortening plugin to the panel data",
            "itemtype": "method",
            "name": "parseContent",
            "params": [
                {
                    "name": "data",
                    "description": "Content to be shortened",
                    "type": "JObject"
                }
            ],
            "return": {
                "description": "Content with after shortening long text nodes",
                "type": "JObject"
            },
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 359,
            "description": "Returns this SubPanel's settings object.",
            "itemtype": "method",
            "name": "getAttributes",
            "return": {
                "description": "This SubPanel's settings",
                "type": "SubPanelSettings"
            },
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 368,
            "description": "Returns this SubPanel's container `div`.",
            "itemtype": "method",
            "name": "getContainer",
            "return": {
                "description": "This SubPanel's `div`",
                "type": "Jobject"
            },
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 377,
            "description": "Returns the inner `div` of the SubPanel",
            "itemtype": "method",
            "name": "getPanel",
            "return": {
                "description": "The inner `div` of the SubPanel",
                "type": "JObject"
            },
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 386,
            "description": "Returns the `origin` of this SubPanel.",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "The `origin` of this SubPanel",
                "type": "String"
            },
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 395,
            "description": "Returns the `guid` of this SubPanel.",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "The `guid` of this SubPanel",
                "type": "String"
            },
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 404,
            "description": "Destroys this SubPanel.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "speed",
                    "description": "The duration of the animation in milliseconds",
                    "type": "Number"
                },
                {
                    "name": "deferred",
                    "description": "The deferred to be resolved after the SubPanel is destroyed",
                    "type": "Deferred"
                }
            ],
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 449,
            "description": "Reopens the SubPanel - stops the closing animation and initiates the opening animation.",
            "itemtype": "method",
            "name": "reopen",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 466,
            "description": "Opens the SubPanel. Sends out `EventManager.GUI.SUBPANEL_CHANGE` event.",
            "itemtype": "method",
            "name": "open",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 481,
            "description": "Assigns a new origin to the SubPanel.",
            "itemtype": "method",
            "name": "changeOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "The new origin of the SubPanel.",
                    "type": "String"
                }
            ],
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 491,
            "description": "Shifts the SubPanel to the new node in the DOM.",
            "itemtype": "method",
            "name": "shiftTarget",
            "params": [
                {
                    "name": "newTarget",
                    "description": "A node in the DOM to shift the SubPanel to",
                    "type": "JObject"
                }
            ],
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 506,
            "description": "Creates a new instance of SubPanel.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "a",
                    "description": "Settings for the SubPanel",
                    "type": "SubPanelSettings"
                }
            ],
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 572,
            "description": "Performs an update of the content and title of the SubPanel, running appropriate animation and `doOn-` / `doAfter-` functions.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "a",
                    "description": "New settings for the SubPanel",
                    "type": "SubPanelSettings"
                }
            ],
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 778,
            "description": "Fires an event when the layout of the page changes.",
            "itemtype": "method",
            "name": "layoutChange",
            "access": "private",
            "tagname": "",
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 806,
            "description": "Return the default width of the SidePanel.",
            "itemtype": "method",
            "name": "getPanelWidthDefault",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The default width of the SidePanel",
                "type": "Number"
            },
            "class": "SubPanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 871,
            "description": "Publishes `PANEL_CHANGE` event when the visibility of the SidePanel changes.",
            "itemtype": "method",
            "name": "panelChange",
            "params": [
                {
                    "name": "visible",
                    "description": "Indicates whether the SidePanel is visible or not",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SidePanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 885,
            "description": "Slides the SidePanel open.",
            "itemtype": "method",
            "name": "openPanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "d",
                    "description": "A deferred to be resolved upon completion of the animation",
                    "type": "Deferred"
                }
            ],
            "class": "SidePanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 909,
            "description": "Slide the SidePanel close",
            "itemtype": "method",
            "name": "closePanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "d",
                    "description": "A deferred to be resolved upon completion of the animation",
                    "type": "Deferred"
                }
            ],
            "class": "SidePanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1013,
            "description": "Toggles the FullScreen mode of the application",
            "itemtype": "method",
            "name": "toggleFullScreenMode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "fullscreen",
                    "description": "true - expand; false - collapse; undefined - toggle;",
                    "type": "Boolean"
                }
            ],
            "class": "SidePanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1032,
            "description": "Fires an event when the subpanel closes or opens.",
            "itemtype": "method",
            "name": "subPanelChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "visible",
                    "description": "indicates whether the panel is visible or not",
                    "type": "Boolean"
                },
                {
                    "name": "origin",
                    "description": "origin of the subpanel",
                    "type": "String"
                },
                {
                    "name": "container",
                    "description": "subpanel container",
                    "type": "JObject"
                },
                {
                    "name": "isComplete",
                    "description": "indicates if subPanel transition has completed or just started",
                    "type": "Boolean"
                }
            ],
            "class": "SidePanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1071,
            "description": "Returns the outer most `div` of this SidePanel.",
            "itemtype": "method",
            "name": "getContainer",
            "return": {
                "description": "The outer most `div` of this SidePanel",
                "type": "JObject"
            },
            "class": "SidePanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1081,
            "description": "Gets the width of this SidePanel.",
            "itemtype": "method",
            "name": "width",
            "return": {
                "description": "The width of this SidePanel",
                "type": "Number"
            },
            "class": "SidePanel",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1093,
            "description": "Create a new SubPanel with the settings provided.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "newSubPanel",
            "params": [
                {
                    "name": "attr",
                    "description": "SubPanel settings",
                    "type": "SubPanelSettings"
                }
            ],
            "return": {
                "description": "A newly created SubPanel",
                "type": "SubPanel"
            },
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1111,
            "description": "Adjusts dimensions of the help panel relative to the mapContent `div`.",
            "itemtype": "method",
            "name": "adjustHelpDimensions",
            "access": "private",
            "tagname": "",
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1123,
            "description": "Adjusts the dimensions and position of the SubPanel when layout of the page is changing.",
            "itemtype": "method",
            "name": "adjutSubPanelDimensions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "subPanel",
                    "description": "SubPanel whose dimensions and position need to be adjusted",
                    "type": "SubPanel"
                }
            ],
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1154,
            "description": "Creates and opens a new SubPanel with given settings.\nIf the SubPanel with the requested `origin` is already present, updates its content.",
            "itemtype": "method",
            "name": "showSubPanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attr",
                    "description": "Settings for the SubPanel instance",
                    "type": "SubPanelSettings"
                }
            ],
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1220,
            "description": "Closes the SubPanel whose `origin` is specified in the `attr` parameter.",
            "itemtype": "method",
            "name": "hideSubPanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attr",
                    "description": "only `origin` attribute is required here",
                    "type": "SubPanelSettings"
                },
                {
                    "name": "speed",
                    "description": "Duration of the closing animation",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "The deferred object to be resolved upon successful closing of the panel",
                    "type": "Deferred"
                }
            ],
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1253,
            "description": "Moves the SubPanel with the specified `origin` in the DOM hierarchy to the new specified `target`; if `target` is not specified, the SubPanel is attached to the SidePanel.",
            "itemtype": "method",
            "name": "dockSubPanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attr",
                    "description": "Settings for the SubPanel; only `target` and `origin` are required here",
                    "type": "SubPanelSettings"
                }
            ],
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1270,
            "description": "Finds a SubPanel with `origin` equal to the supplied `consumeOrigin` and\n+ changes its `origin` to the supplied `origin`\n+ moves the SubPanel in the DOM hierarchy and attaches it to the specified target",
            "itemtype": "method",
            "name": "captureSubPanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attr",
                    "description": "Settings for the SubPanel; only `origin`, `consumeOrigin` and `target` are required here",
                    "type": "SubPanelSettings"
                }
            ],
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\gui.js",
            "line": 1296,
            "description": "Call load to initialize the GUI module.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "id",
                    "description": "ID of this module",
                    "type": "Number"
                },
                {
                    "name": "req",
                    "description": "???",
                    "type": "?"
                },
                {
                    "name": "load",
                    "description": "The callback function",
                    "type": "Function"
                }
            ],
            "class": "GUI",
            "module": "RAMP",
            "submodule": "UI"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 82,
            "description": "An Array of {{#crossLink \"Esri/layer/FeatureLayer\"}}{{/crossLink}} objects.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "featureLayers",
            "type": "Array",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 90,
            "description": "An Array of {{#crossLink \"Esri/layer/WMSLayer\"}}{{/crossLink}} objects.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "wmsLayers",
            "type": "Array",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 98,
            "description": "Maps the id of a graphic layer to the GraphicsLayer Object that represents its extent bounding box.\nA dictionary of String, {{#crossLink \"Esri/layer/GraphicsLayer\"}}{{/crossLink}} pairs.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "boundingBoxMapping",
            "type": "Object",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 107,
            "description": "The map not only contains feature layers, but also other layers such as the\nbasemap layer, highlight layer, bounding box layer, etc. This variable is\nused to store the starting index of the feature layers in the map.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "featureLayerStartIndex",
            "type": "Integer",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 123,
            "description": "Shows the loading image.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_showLoadingImg",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 133,
            "description": "Hides the loading image.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_hideLoadingImg",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 143,
            "description": "Update Map Scale when zoom level changes",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateScale",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 160,
            "description": "Initialize Map Scale",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_initScale",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 190,
            "description": "Republishes map events to the outside using topic.publish",
            "itemtype": "method",
            "name": "_initRepublishers",
            "params": [
                {
                    "name": "map",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 200,
            "description": "Republish map events using topic.publish",
            "itemtype": "method",
            "name": "republish",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 221,
            "description": "Subscribe to external events (published using topic.publish)\nand react accordingly",
            "itemtype": "method",
            "name": "_initListeners",
            "params": [
                {
                    "name": "map",
                    "description": "map object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 371,
            "description": "Creates event handlers for the map control: click, mouse-over, load, extent change, and update events.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_initEventHandlers",
            "params": [
                {
                    "name": "map",
                    "description": "A ESRI map object",
                    "type": "Object"
                }
            ],
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 453,
            "description": "Instantiates an extent from a JSON config object and spatial reference",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "createExtent",
            "params": [
                {
                    "name": "extentConfig",
                    "description": "the JSON config object",
                    "type": "Object"
                },
                {
                    "name": "sr",
                    "description": "the {{#crossLink \"Esri/SpatialReference\"}}{{/crossLink}}",
                    "type": "Esri/SpatialReference"
                }
            ],
            "return": {
                "description": "An ESRI extent object based on the config data",
                "type": "Esri/geometry/Extent"
            },
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 467,
            "description": "Add a static, non-interactive Layer to the map",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "AddStaticLayer",
            "params": [
                {
                    "name": "layer_type",
                    "description": "A value which controls how the layer is going to be added to the map",
                    "type": "String"
                },
                {
                    "name": "layer_url",
                    "description": "A URL pointing to a valid map service endpoint",
                    "type": "String"
                },
                {
                    "name": "layer_op",
                    "description": "A value between 0.0 and 1.0 which determines the transparency of the layer",
                    "type": "Number"
                }
            ],
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 510,
            "description": "Sets the visibility of the bounding box that belongs to the layer with the given layerId.\nNote: the layerId needs to be the ID of the featurelayer, not the ID of the actual bounding\nbox layer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setBoundingBoxVisibility",
            "params": [
                {
                    "name": "layerId",
                    "description": "the id of the layer whose bounding box visibility should be set",
                    "type": "String"
                }
            ],
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 598,
            "description": "The maximum extent of the map control is allowed to go to",
            "itemtype": "property",
            "name": "getMaxExtent",
            "type": "{Object}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 607,
            "description": "Return the map control object",
            "itemtype": "property",
            "name": "getMap",
            "type": "{Object}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 620,
            "description": "Returns a list of feature layers that are currently visible on the map.",
            "itemtype": "method",
            "name": "getVisibleFeatureLayers",
            "return": {
                "description": "an array of {{#crossLink \"Esri/layer/FeatureLayer\"}}{{/crossLink}} objects",
                "type": "Array"
            },
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 634,
            "description": "Return the feature layer corresponding to the given url.",
            "itemtype": "method",
            "name": "getFeatureLayer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "featureUrl",
                    "description": "the url of the feature layer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "feature layer",
                "type": "Esri/layer/FeatureLayer"
            },
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 649,
            "description": "Given an ESRI Extent Object, returns a new ESRI Extent Object that\ncontains the extent adjusted according to this map's maximum extent\n\nNOTE: this method is currently unused!",
            "params": [
                {
                    "name": "e",
                    "description": "the extent Object",
                    "type": "Esri/geometry/Extent"
                },
                {
                    "name": "maxExtent",
                    "description": "the maximum extent",
                    "type": "Esri/geometry/Extent"
                }
            ],
            "return": {
                "description": "An adjusted extent, if the target extent is outside the boundary",
                "type": "Esri/geometry/Extent"
            },
            "itemtype": "method",
            "name": "checkBoundary",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 738,
            "description": "The spatial reference of the map",
            "itemtype": "property",
            "name": "spatialReference",
            "access": "private",
            "tagname": "",
            "type": "{esri/SpatialReference}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 747,
            "description": "The URL of the basemap that is on by default",
            "itemtype": "property",
            "name": "url",
            "access": "private",
            "tagname": "",
            "type": "{String}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 758,
            "description": "The basemap layer",
            "itemtype": "property",
            "name": "baseLayer",
            "access": "private",
            "tagname": "",
            "type": "{Esri/layers/ArcGISTiledMapServiceLayer}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 769,
            "description": "The maximum extent of the map",
            "itemtype": "property",
            "name": "maxExtent",
            "access": "private",
            "tagname": "",
            "type": "{esri/geometry/Extent}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 778,
            "description": "The initial extent of the map",
            "itemtype": "property",
            "name": "InitExtent",
            "access": "private",
            "tagname": "",
            "type": "{esri/geometry/Extent}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 787,
            "description": "Used for full extent in nav widget",
            "itemtype": "property",
            "name": "fullExtent",
            "access": "private",
            "tagname": "",
            "type": "{esri/geometry/Extent}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\map.js",
            "line": 857,
            "description": "A list GraphicsLayer that represent the extent bounding box of the feature layers.\n{[esr/layer/featurelayers]} featureLayers A list of feature layers found in the application config\n{[esri/layer/graphiclayer]}  An array of graphic layers to add to the map",
            "itemtype": "property",
            "name": "boundingBoxLayers",
            "type": "{array of esri/layer/GraphicsLayer}",
            "class": "Map",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\mapClickHandler.js",
            "line": 45,
            "description": "This function should be called after the map has been created.  It will subscribe to the Map.CLICK event\nand trigger GUI.SUBPANEL_OPEN events for displaying the response data.",
            "itemtype": "method",
            "name": "registerWMSClick",
            "params": [
                {
                    "name": "map",
                    "description": "an EsriMap instance",
                    "type": "Object"
                }
            ],
            "class": "MapClickHandler",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\mapClickHandler.js",
            "line": 141,
            "description": "This function is called to register a WMS layer for feature info click events.  The parameter wmsData\nshould include wmsLayer (an instance of an ESRI WMSLayer) and layerConfig (a reference to the configuration\nnode for the WMS layer).",
            "itemtype": "method",
            "name": "registerWMSClick",
            "params": [
                {
                    "name": "wmsData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "MapClickHandler",
            "module": "RAMP",
            "submodule": "Map"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 69,
            "description": "Returns the position of the sub-panel relative to the leftmost edge of the screen.",
            "itemtype": "method",
            "name": "getSubPanelLeftOffset",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "position of hte sub-panel relative to the leftmost edge of the screen",
                "type": "Number"
            },
            "class": "Maptips",
            "module": "Map",
            "submodule": "Maptips"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 80,
            "description": "Returns the position of the maptip relative to the leftmost edge of the screen.",
            "itemtype": "method",
            "name": "getToolTipOffset",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the position of the maptip relative to the leftmost edge of the screen",
                "type": "Number"
            },
            "class": "Maptips",
            "module": "Map",
            "submodule": "Maptips"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 97,
            "description": "Checks if the maptip is hidden by the sub-panel and publishes a center-at event to pan the map, moving maptip into view.",
            "itemtype": "method",
            "name": "checkMaptipPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "a node to which the tooltip will be attached",
                    "type": "JObject"
                },
                {
                    "name": "graphic",
                    "description": "[description]",
                    "type": "Object"
                }
            ],
            "class": "Maptips",
            "module": "Map",
            "submodule": "Maptips"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 126,
            "description": "Generates content for a maptip.",
            "itemtype": "method",
            "name": "getMaptipContent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "graphic",
                    "description": "map graphic the tip is describing",
                    "type": "Object"
                },
                {
                    "name": "interactive",
                    "description": "indicates whether the maptip should have a close button",
                    "type": "String"
                }
            ],
            "class": "Maptips",
            "module": "Map",
            "submodule": "Maptips"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 156,
            "description": "Creates a maptip on the map.",
            "itemtype": "method",
            "name": "showMapTip",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "a node the user hovered over",
                    "type": "JObject"
                },
                {
                    "name": "graphic",
                    "description": "the graphic belonging to the target",
                    "type": "Object"
                },
                {
                    "name": "interactive",
                    "description": "indicates whether the maptip should have a close button",
                    "type": "Boolean"
                }
            ],
            "class": "Maptips",
            "module": "Map",
            "submodule": "Maptips"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 208,
            "description": "Initialize event listeners for the maptip events",
            "itemtype": "method",
            "name": "initListeners",
            "access": "private",
            "tagname": "",
            "class": "Maptips",
            "module": "Map",
            "submodule": "Maptips"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\maptips.js",
            "line": 262,
            "description": "Calls the event handling initialization function",
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "class": "Maptips",
            "module": "Map",
            "submodule": "Maptips"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\navigation.js",
            "line": 43,
            "description": "Listen to internal events and republish for other modules' benefit",
            "itemtype": "method",
            "name": "initTopics",
            "access": "private",
            "tagname": "",
            "class": "Navigation",
            "module": "RAMP",
            "submodule": "Navigation"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\navigation.js",
            "line": 72,
            "description": "Listen to map evens and adjust the navigation widget accordingly",
            "itemtype": "method",
            "name": "initListeners",
            "access": "private",
            "tagname": "",
            "class": "Navigation",
            "module": "RAMP",
            "submodule": "Navigation"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\navigation.js",
            "line": 101,
            "description": "Initialize navigation widget for pan and zooming using global configuration object",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "currentLevel",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Navigation",
            "module": "RAMP",
            "submodule": "Navigation"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\quickzoom.js",
            "line": 139,
            "description": "Change the extent of the map based on the extent data\nretrieved from the given url",
            "itemtype": "method",
            "name": "changeExtent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "QuickZoom",
            "module": "RAMP",
            "submodule": "QuickZoom"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\quickzoom.js",
            "line": 172,
            "description": "Populate the given dropdown with data from the given url.",
            "itemtype": "method",
            "name": "populateDropDown",
            "params": [
                {
                    "name": "url",
                    "description": "the url to the service containing the data to populate the dropdown",
                    "type": "String"
                },
                {
                    "name": "select",
                    "description": "the dojo Select object to populate",
                    "type": "DObject"
                },
                {
                    "name": "query",
                    "description": "to execute",
                    "type": "Object"
                },
                {
                    "name": "mapFunc",
                    "description": "the function to convert each element in the retrieved data to a label that can be added to the dropdown menu",
                    "type": "Function"
                }
            ],
            "class": "QuickZoom",
            "module": "RAMP",
            "submodule": "QuickZoom"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\quickzoom.js",
            "line": 218,
            "description": "Populates the city dropdown menu with the cities in the\nselected province.",
            "itemtype": "method",
            "name": "populateCityDropDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "prov",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "QuickZoom",
            "module": "RAMP",
            "submodule": "QuickZoom"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\quickzoom.js",
            "line": 267,
            "description": "Returns true if the given postal code is valid, false otherwise.",
            "itemtype": "method",
            "name": "validatePostalCode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "fsa",
                    "description": "fsa",
                    "type": "String"
                }
            ],
            "class": "QuickZoom",
            "module": "RAMP",
            "submodule": "QuickZoom"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\ramp.js",
            "line": 55,
            "description": "Updates some of the Strings on the HTML page using the config string resources",
            "itemtype": "method",
            "name": "loadStrings",
            "class": "RAMP",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\ramp.js",
            "line": 64,
            "description": "Returns the feature layer config for the given url",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "wmsName",
                    "description": "WMS Layer name.  Optional.  Should only be provided if attempting to get a WMS layer.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getLayerConfig",
            "class": "RAMP",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\ramp.js",
            "line": 103,
            "description": "Gets the defined symbology from a layer's web service",
            "itemtype": "method",
            "name": "_getSymbolConfig",
            "params": [
                {
                    "name": "layerUrl",
                    "description": "A URL to the feature layer service",
                    "type": "String"
                },
                {
                    "name": "wmsName",
                    "description": "WMS Layer name.  Optional.  Should only be provided if attempting to get a WMS layer.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The defined symbology from the layer definition",
                "type": "Esri/layer/symbology"
            },
            "class": "RAMP",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\ramp.js",
            "line": 114,
            "description": "Gets the default symbology icon from a layer's web service",
            "itemtype": "method",
            "name": "getSymbolForLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "A feature layer",
                    "type": "Object"
                },
                {
                    "name": "wmsName",
                    "description": "WMS Layer name.  Optional.  Should only be provided if attempting to get a WMS layer.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The default icon from the layer's symbology",
                "type": "Icon"
            },
            "class": "RAMP",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\ramp.js",
            "line": 126,
            "description": "Given a feature object or a graphic object (or any object that has a getLayer method and an\nattributes field) return the object containing the image URL and legend text for that\nfeature/graphic object.",
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The default icon used to represent the feature layer",
                "type": "Icon"
            },
            "itemtype": "method",
            "name": "getSymbolForFeature",
            "class": "RAMP",
            "module": "RAMP"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\theme.js",
            "line": 61,
            "description": "Toggles full screen mode",
            "itemtype": "method",
            "name": "_toggleFullScreenMode",
            "params": [
                {
                    "name": "fullscreen",
                    "description": "true - full screen on; false - full screen off; undefined - toggle;",
                    "type": "Boolean"
                }
            ],
            "class": "Theme",
            "module": "RAMP",
            "submodule": "Theme"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\theme.js",
            "line": 107,
            "description": "Allows to set callbacks to the full screen transition.",
            "itemtype": "method",
            "name": "fullScreenCallback",
            "params": [
                {
                    "name": "event",
                    "description": "Event name to set a callback on",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This",
                "type": "Object"
            },
            "chainable": 1,
            "class": "Theme",
            "module": "RAMP",
            "submodule": "Theme"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\theme.js",
            "line": 122,
            "description": "Returns a boolean indication whether the full screen mode is on.",
            "itemtype": "method",
            "name": "isFullScreen",
            "return": {
                "description": "true / false",
                "type": "Boolean"
            },
            "class": "Theme",
            "module": "RAMP",
            "submodule": "Theme"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\theme.js",
            "line": 132,
            "description": "Toggles the FullScreen mode of the application",
            "itemtype": "method",
            "name": "toggleFullScreenMode",
            "params": [
                {
                    "name": "fullscreen",
                    "description": "true - expand; false - collapse; undefined - toggle;",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "This",
                "type": "Object"
            },
            "chainable": 1,
            "class": "Theme",
            "module": "RAMP",
            "submodule": "Theme"
        },
        {
            "file": "src\\js\\RAMP\\Modules\\theme.js",
            "line": 146,
            "description": "Tooltip setter helper method.",
            "itemtype": "method",
            "name": "tooltipster",
            "params": [
                {
                    "name": "target",
                    "description": "A node to looked for tooltiped children on",
                    "type": "Jquery"
                },
                {
                    "name": "type",
                    "description": "Type of the tooltips to set",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "Action name: \"update\" will update all the tooltips on target with their respective title attributes;\nnull will create new tooltips",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "This",
                "type": "Object"
            },
            "chainable": 1,
            "class": "Theme",
            "module": "RAMP",
            "submodule": "Theme"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\areaTool.js",
            "line": 54,
            "description": "Compute the area and length of a specified polygon.",
            "itemtype": "method",
            "name": "computeAreaAndLength",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evtObj",
                    "description": "an object representing the event.",
                    "type": "Object"
                }
            ],
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\areaTool.js",
            "line": 84,
            "description": "Display the calculated area and length on the map.",
            "itemtype": "method",
            "name": "outputAreaAndLength",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evtObj",
                    "description": "an object representing the event.",
                    "type": "Object"
                }
            ],
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\areaTool.js",
            "line": 125,
            "description": "Activates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "activate",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\areaTool.js",
            "line": 137,
            "description": "Deactivates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "deactivate",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\areaTool.js",
            "line": 148,
            "description": "Clears the map. This method is passed to the `initToggle` method as the `defaultAction`\nto be triggered by the BaseTool logic when the `float-default-button` is clicked.",
            "itemtype": "method",
            "name": "clearMap",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\areaTool.js",
            "line": 161,
            "description": "Displays the tool's output by calling BaseTool's `displayOutput` function.",
            "itemtype": "method",
            "name": "displayOutput",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\areaTool.js",
            "line": 181,
            "description": "Initialize the population tool",
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 52,
            "description": "Stored options passed to the BaseTool.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 62,
            "description": "Handle (popup handle) that triggers opening/closing of the tool.",
            "itemtype": "property",
            "name": "handle",
            "type": "JObject",
            "default": "null",
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 72,
            "description": "Node (button) the handle is attached too.",
            "itemtype": "property",
            "name": "node",
            "type": "JObject",
            "default": "null",
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 81,
            "description": "Node representing the tool output float container.",
            "itemtype": "property",
            "name": "outputFloat",
            "type": "JObject",
            "default": "templates/tools_template.json:base_tool_float",
            "example": [
                "\n     <div class='advanced-output-section-container'>\n         <div class='advanced-output-section'>\n             <section class='float-content'></section>\n             <button class='button button-none float-default-button' >\n                 <i class='fa fa-trash-o'></i><span class='on-right'>{%= o.clearMapButton %}</span>\n             </button>\n             <div class='clear'></div>\n         </div>\n     </div>"
            ],
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 100,
            "description": "Template string representing `working` label shown when the tool is in `busy` state.",
            "itemtype": "property",
            "name": "workingLabel",
            "type": "String",
            "default": "templates/tools_template.json:working_label",
            "example": [
                "     <span class='tool-tooltip'><i class='fa fa-cog fa-spin'></i>{%= o.workingLabel %}</span>"
            ],
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 110,
            "description": "Tooltip node that appears by the mouse cursor when tools is activated.",
            "itemtype": "property",
            "name": "tooltip",
            "type": "JObject",
            "default": "$(\"#mainMap.map > .tooltip\")",
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 120,
            "description": "Stringified and parsed templates",
            "itemtype": "property",
            "name": "template",
            "type": "Object",
            "default": "templates/tools_template.json",
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 130,
            "description": "Event names published by the BaseTool",
            "itemtype": "property",
            "name": "event",
            "type": "Object",
            "default": "null",
            "example": [
                "\n     {\n         ACTIVATE: \"basetool-activate\",\n         DEACTIVATE: \"basetool-deactivate\"\n     }"
            ],
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 143,
            "description": "Published whenever a Tool is activated.",
            "itemtype": "event",
            "name": "ACTIVATE",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "tool",
                            "description": "Tool that was activated",
                            "type": "BaseTool"
                        }
                    ]
                }
            ],
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 152,
            "description": "Published whenever a Tool is deactivated.",
            "itemtype": "event",
            "name": "DEACTIVATE",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "tool",
                            "description": "Tool that was deactivated",
                            "type": "BaseTool"
                        }
                    ]
                }
            ],
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 164,
            "description": "Name of the tool so AdvancedToolbar can distinguish between them.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "BaseTool",
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 173,
            "description": "Initializes the tool and sets up popup to handle activating/deactivating of the tool. Tools should call this function on `init`,\nunless they employ a different workflow and then need to handle all function activation/deactivation/working themselves.",
            "itemtype": "method",
            "name": "initToggle",
            "params": [
                {
                    "name": "selector",
                    "description": "a target selector that serves as a toggle for the tool",
                    "type": "JObject"
                },
                {
                    "name": "d",
                    "description": "a Deferred object to be resolved after tool initiates",
                    "type": "JObject"
                },
                {
                    "name": "options",
                    "description": "Additional options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "target",
                            "description": "Target where the tool's float should be appended to",
                            "type": "JObject",
                            "optional": true
                        },
                        {
                            "name": "outputFloatTemplate",
                            "description": "Template name to generate the float container with",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "outputFloatData",
                            "description": "Data payload to be passed to the template engine when generate the float container",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "workingLabelTemplate",
                            "description": "Template name to generate the `busy` label",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "workingLabelData",
                            "description": "Data payload to be passed to the template engine when generate the `busy` label",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "activate",
                            "description": "an activate function to be called when the toggle is clicked",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "deactivate",
                            "description": "a deactivate function to be called when the toggle is clicked",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "defaultAction",
                            "description": "Function to be executed when the `float-default-button` is clicked",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "return": {
                "description": "this tool"
            },
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 305,
            "description": "Generates output to be injected into the tool's float given a template's name and data object.",
            "itemtype": "method",
            "name": "displayTemplateOutput",
            "params": [
                {
                    "name": "templateData",
                    "description": "data to be put inside the specified template",
                    "type": "Object"
                },
                {
                    "name": "templateName",
                    "description": "template name to be completed with provided data; if not supplied, \"toolOutputTemplate\" property of the options object will be used",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "return": {
                "description": "this tool"
            },
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 329,
            "description": "Injects given tool output into the tool's float.",
            "itemtype": "method",
            "name": "displayOutput",
            "params": [
                {
                    "name": "output",
                    "description": "String or node collection to be injected into the tool output float.",
                    "type": "String | JObject"
                }
            ],
            "chainable": 1,
            "return": {
                "description": "this tool"
            },
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 345,
            "description": "Sets the tool into a specified state; if the tool is `working`, a `working` label is placed beside the cursor and injected into the tool output float.",
            "itemtype": "method",
            "name": "working",
            "params": [
                {
                    "name": "state",
                    "description": "indicates the state of the tool: working, idle",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "return": {
                "description": "This tool"
            },
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 368,
            "description": "Activate the tool by triggering `open` method on the tool's popup handle.",
            "itemtype": "method",
            "name": "activate",
            "chainable": 1,
            "return": {
                "description": "This tool"
            },
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\baseTool.js",
            "line": 383,
            "description": "Deactivate the tool by triggering `close` method on the tool's popup handle.",
            "itemtype": "method",
            "name": "deactivate",
            "chainable": 1,
            "return": {
                "description": "This tool"
            },
            "class": "BaseTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 61,
            "description": "Compute the buffer of a specified polygon.",
            "itemtype": "method",
            "name": "computeBuffer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evtObj",
                    "description": "an object representing the `draw-end` event.",
                    "type": "Object"
                }
            ],
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 106,
            "description": "Display the buffered polygon on the map.",
            "itemtype": "method",
            "name": "outputBuffer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "bufferedGeometries",
                    "description": "result of the geoprocessor.",
                    "type": "Object"
                }
            ],
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 136,
            "description": "Initiates additional UI components of the Tool.",
            "itemtype": "method",
            "name": "ui.init",
            "access": "private",
            "tagname": "",
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 161,
            "description": "Activates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "activate",
            "access": "private",
            "tagname": "",
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 173,
            "description": "Deactivates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "deactivate",
            "access": "private",
            "tagname": "",
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 184,
            "description": "Clears the map. This method is passed to the `initToggle` method as the `defaultAction`\nto be triggered by the BaseTool logic when the `float-default-button` is clicked.",
            "itemtype": "method",
            "name": "clearMap",
            "access": "private",
            "tagname": "",
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 195,
            "description": "Displays the tool's output by calling BaseTool's `displayOutput` function.",
            "itemtype": "method",
            "name": "displayOutput",
            "access": "private",
            "tagname": "",
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\bufferTool.js",
            "line": 210,
            "description": "Initialize the buffer tool",
            "itemtype": "method",
            "name": "init",
            "chainable": 1,
            "is_constructor": 1,
            "class": "BufferTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 54,
            "description": "Compute the area and length of a specified polygon.",
            "itemtype": "method",
            "name": "computeAreaAndLength",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evtObj",
                    "description": "an object representing the event.",
                    "type": "Object"
                }
            ],
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 84,
            "description": "Display the calculated area and length on the map.",
            "itemtype": "method",
            "name": "outputAreaAndLength",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evtObj",
                    "description": "an object representing the event.",
                    "type": "Object"
                }
            ],
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 122,
            "description": "Activates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "activate",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 134,
            "description": "Deactivates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "deactivate",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 145,
            "description": "Clears the map. This method is passed to the `initToggle` method as the `defaultAction`\nto be triggered by the BaseTool logic when the `float-default-button` is clicked.",
            "itemtype": "method",
            "name": "clearMap",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 158,
            "description": "Displays the tool's output by calling BaseTool's `displayOutput` function.",
            "itemtype": "method",
            "name": "displayOutput",
            "access": "private",
            "tagname": "",
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\distanceTool.js",
            "line": 175,
            "description": "Initialize the population tool",
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "class": "MeasureTool",
            "module": "RAMP",
            "submodule": "MeasureTool"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 54,
            "description": "Compute an estimated amount of people in a specified polygon.",
            "itemtype": "method",
            "name": "computeZonalStats",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evtObj",
                    "description": "an object representing the event.",
                    "type": "Object"
                }
            ],
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 88,
            "description": "Display the calculated population on the map.",
            "itemtype": "method",
            "name": "outputTotalPopulation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evtObj",
                    "description": "an object representing the event.",
                    "type": "Object"
                }
            ],
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 107,
            "description": "Initiates additional UI components of the Tool.",
            "itemtype": "method",
            "name": "ui.init",
            "access": "private",
            "tagname": "",
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 139,
            "description": "Activates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "activate",
            "access": "private",
            "tagname": "",
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 151,
            "description": "Deactivates the Tool. This method is passed to the `initToggle` method and is triggered by the BaseTool logic.",
            "itemtype": "method",
            "name": "deactivate",
            "access": "private",
            "tagname": "",
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 162,
            "description": "Clears the map. This method is passed to the `initToggle` method as the `defaultAction`\nto be triggered by the BaseTool logic when the `float-default-button` is clicked.",
            "itemtype": "method",
            "name": "clearMap",
            "access": "private",
            "tagname": "",
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 175,
            "description": "Displays the tool's output by calling BaseTool's `displayOutput` function.",
            "itemtype": "method",
            "name": "displayOutput",
            "access": "private",
            "tagname": "",
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Tools\\populationTool.js",
            "line": 191,
            "description": "Initialize the population tool",
            "itemtype": "method",
            "name": "init",
            "chainable": 1,
            "is_constructor": 1,
            "class": "PopulationTool",
            "module": "Tools"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\array.js",
            "line": 20,
            "description": "Returns an array that has only unique values (only the first element is kept).",
            "itemtype": "method",
            "name": "unique",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "Array to be searched",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array that has only unique values",
                "type": "Array"
            },
            "class": "Array",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\array.js",
            "line": 34,
            "description": "Returns the first element in the given array that satisfies the given\npredicate. Returns null if no element in the given array satisfies\nthe given predicate.\n\n#####EXAMPLE\n    var array = [1, 2, 3, 4]\n    find(array, function(a_number) { return a_number === 2 }); -> 2\n    find(array, function(a_number) { return a_number === 5 }); -> null",
            "itemtype": "method",
            "name": "find",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "Array to be searched",
                    "type": "Array"
                },
                {
                    "name": "predicate",
                    "description": "a function that takes one argument and returns true if the\nargument satisfies some condition, and false otherwise.</param>",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "???",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "first elemtn that satisfies the given preidcate; `null` if no such element is found",
                "type": "Object"
            },
            "class": "Array",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\array.js",
            "line": 62,
            "description": "Returns the index of the first element in the given array that satisfies the given\npredicate. Returns -1 if no element in the given array satisfies the predicate.",
            "itemtype": "method",
            "name": "indexOf",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "Array to be searched",
                    "type": "Array"
                },
                {
                    "name": "predicate",
                    "description": "predicate a function that takes one argument and returns true if the",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "???",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "index of the first element that satisfied the predicate; `-1` if no such element is found",
                "type": "Number"
            },
            "class": "Array",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\array.js",
            "line": 87,
            "description": "Given a function which takes one argument and returns 1, 0, or -1, returns the first element\nwhich causes the given function to return 0.",
            "itemtype": "method",
            "name": "binaryIndexOf",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "Array to be searched",
                    "type": "Array"
                },
                {
                    "name": "compareFcn",
                    "description": "???",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the index of the element that causes the given function to return 0, returns -1 if no such element exists",
                "type": "Number"
            },
            "class": "Array",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\array.js",
            "line": 119,
            "description": "Given a function which takes one argument and returns 1, 0, or -1, returns the first element\nwhich causes the given function to return 0.",
            "itemtype": "method",
            "name": "binaryFind",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "Array to be searched",
                    "type": "Array"
                },
                {
                    "name": "compareFcn",
                    "description": "???",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the index of the element that causes the given function to return 0, returns -1 if no such element exists</returns>",
                "type": "Number"
            },
            "class": "Array",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 46,
            "description": "Node of the input checkbox originally supplied to the Checkbox.",
            "itemtype": "property",
            "name": "node",
            "type": "JObject",
            "default": "null",
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 55,
            "description": "Node of the input checkbox label.",
            "itemtype": "property",
            "name": "labelNode",
            "type": "JObject",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 65,
            "description": "Name of the \"data-*\" attribute set on the checkbox node to be treated as the checkbox id.",
            "itemtype": "property",
            "name": "nodeIdAttr",
            "type": "String",
            "default": "\"id\"",
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 74,
            "description": "`active`, `focus`, and `check` CSS class to be applied to the Checkbox correspondingly.",
            "itemtype": "property",
            "name": "cssClass",
            "type": "{Object}",
            "default": "",
            "example": [
                "\n     cssClass: {\n         active: \"active\",\n         focus: \"focused\",\n         check: \"checked\"\n     }"
            ],
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 93,
            "description": "`check` and `uncheck` label texts to be applied to the Checkbox labels.",
            "itemtype": "property",
            "name": "label",
            "type": "{Object}",
            "default": "",
            "example": [
                "\n     label: {\n         check: \"check\",\n         uncheck: \"unchecked\"\n     }"
            ],
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 110,
            "description": "A function to be called when the state of the Checkbox changes.",
            "itemtype": "property",
            "name": "onChnage",
            "type": "Function",
            "default": "",
            "example": [
                "     function () { }"
            ],
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 120,
            "description": "State of the Checkbox: true | false",
            "itemtype": "property",
            "name": "state",
            "type": "Boolean",
            "default": "null",
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 129,
            "description": "Id of the Checkbox as specified by `nodeIdAttr`.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "default": "null",
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 138,
            "description": "An object specifying possible agencies that can affect the Checkbox.",
            "itemtype": "property",
            "name": "agency",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "default": "",
            "example": [
                "\n     agency: {\n          USER: \"USER\",\n          CODE: \"CODE\"\n      }"
            ],
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 156,
            "description": "Event names published by the Checkbox",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "event",
            "type": "Object",
            "default": "null",
            "example": [
                "\n     {\n         TOGGLE: \"checkbox/toggle\"\n     }"
            ],
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 169,
            "description": "Published whenever a Checkbox get toggled.",
            "itemtype": "event",
            "name": "TOGGLE",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "checkbox",
                            "description": "Checkbox object that has been toggled",
                            "type": "Checkbox"
                        },
                        {
                            "name": "agency",
                            "description": "Agency that toggled the Checkbox",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 238,
            "description": "Emits a `TOGGLE` event when the checkbox's state is changed.",
            "itemtype": "method",
            "name": "_emit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "agency",
                    "description": "Specified the agency that toggled the Checkbox.",
                    "type": "String"
                }
            ],
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkbox.js",
            "line": 255,
            "description": "Toggle the state of Checkbox.",
            "itemtype": "method",
            "name": "setState",
            "params": [
                {
                    "name": "state",
                    "description": "Specifies the state of the checkbox: true, false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Control object for chaining",
                "type": "Checkbox"
            },
            "chainable": 1,
            "class": "Checkbox",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 62,
            "description": "Nodes of the checkbox nodes originally supplied to the CheckboxGroup.",
            "itemtype": "property",
            "name": "nodes",
            "type": "JArray",
            "default": "[]",
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 71,
            "description": "Name of the \"data-*\" attribute set on the checkbox node to be treated as the checkbox id.",
            "itemtype": "property",
            "name": "nodeIdAttr",
            "type": "String",
            "default": "\"id\"",
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 80,
            "description": "An array of the Checkbox object belonging to the body of the group.",
            "itemtype": "property",
            "name": "nodes",
            "type": "Array",
            "default": "[]",
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 89,
            "description": "`active`, `focus`, and `check` CSS class to be applied to the Checkbox correspondingly.",
            "itemtype": "property",
            "name": "cssClass",
            "type": "{Object}",
            "default": "",
            "example": [
                "\n     cssClass: {\n         active: \"active\",\n         focus: \"focused\",\n         check: \"checked\"\n     }"
            ],
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 108,
            "description": "`check` and `uncheck` label texts to be applied to the Checkbox labels.",
            "itemtype": "property",
            "name": "label",
            "type": "{Object}",
            "default": "",
            "example": [
                "\n     label: {\n         check: \"check\",\n         uncheck: \"unchecked\"\n     }"
            ],
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 125,
            "description": "A function to be called when the state of the Checkbox changes.",
            "itemtype": "property",
            "name": "onChnage",
            "type": "Function",
            "default": "",
            "example": [
                "     function () { }"
            ],
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 135,
            "description": "Options for the master Checkbox.",
            "itemtype": "property",
            "name": "master",
            "type": "Object",
            "default": "",
            "example": [
                "\n     master: {\n         node: null,\n         checkbox: null,\n         nodeIdAttr: null,\n\n         cssClass: {\n             active: \"active\",\n             focus: \"focused\",\n             check: \"checked\"\n         },\n\n         label: {\n             check: \"checked\",\n             uncheck: \"unchecked\"\n         },\n\n         onChange: function () { }\n     }\n"
            ],
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 180,
            "description": "Event names published by the Checkbox",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "event",
            "type": "Object",
            "default": "null",
            "example": [
                "\n     {\n         MEMBER_TOGGLE: \"checkbox/toggled\",\n         MASTER_TOGGLE: \"checkbox/toggled\"\n     }"
            ],
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 194,
            "description": "This event is not published by CheckboxGroup. __Ignore this.__",
            "itemtype": "event",
            "name": "TOGGLE",
            "access": "private",
            "tagname": "",
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 201,
            "description": "Published whenever a Checkbox get toggled.",
            "itemtype": "event",
            "name": "MEMBER_TOGGLE",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "checkbox",
                            "description": "Checkbox object that has been toggled",
                            "type": "Checkbox"
                        },
                        {
                            "name": "agency",
                            "description": "Agency that toggled the Checkbox",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 211,
            "description": "Published whenever the master Checkbox get toggled.",
            "itemtype": "event",
            "name": "MASTER_TOGGLE",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "checkbox",
                            "description": "master Checkbox object that has been toggled",
                            "type": "Checkbox"
                        },
                        {
                            "name": "agency",
                            "description": "Agency that toggled the Checkbox",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 274,
            "description": "Synchronizes the state of the master Checkbox with the state of the group.\nAll group members checked -> master checked\nAny of the group members unchecked -> master unchecked",
            "itemtype": "method",
            "name": "_checkMaster",
            "access": "private",
            "tagname": "",
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 293,
            "description": "Toggles the state of the specified Checkbox. If checkboxId is not supplied, toggles the whole group.",
            "itemtype": "method",
            "name": "setState",
            "params": [
                {
                    "name": "state",
                    "description": "Specifies the state of the checkbox: true, false",
                    "type": "Boolean"
                },
                {
                    "name": "checkboxId",
                    "description": "Specifies the checkbox to toggle.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "CheckboxGroup"
            },
            "chainable": 1,
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\checkboxGroup.js",
            "line": 328,
            "description": "Toggle all the checkboxes based on the return value of the given function.",
            "params": [
                {
                    "name": "fcn",
                    "description": "a function that takes a checkbox as an argument and returns\ntrue if the given checkbox should be toggled on, false if it should be toggled off",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "setEachState",
            "chainable": 1,
            "class": "CheckboxGroup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\decorator.js",
            "line": 18,
            "description": "Given a comparator function that takes two objects and returns an integer (positive integer\nmeans the first object is greater in sort order than the second object, negative integer\nmeans the second object is greater in sort order than the first object, zero if both objects\nhave the same sort order). Returns a function that takes one object compares it to the given\ntarget using the given compareFcn and returns the result of the `compareFcn`.\n\nA useful scenario of this function would be if one had a sorting function used to sort an array\nthen one wishes to perform binary search on the sorted array.",
            "itemtype": "method",
            "name": "getFindFcn",
            "static": 1,
            "params": [
                {
                    "name": "compareFcn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "that takes one object compares it to the given target using the given compareFcn and returns the result of the compareFcn",
                "type": "Function"
            },
            "class": "Decorator",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 30,
            "description": "Iterates over the key-value pair in the given dictionary (in arbitrary order) and\ncalls the given function on each key-value pair.",
            "itemtype": "method",
            "name": "forEachEntry",
            "static": 1,
            "params": [
                {
                    "name": "dict",
                    "description": "a dictionary object",
                    "type": "Object"
                },
                {
                    "name": "fcn",
                    "description": "a function that takes the following parameters:\n - the `key`\n - the `value`\n - `obj` (an optional parameter) that contains two fields, exit and returnVal. If exit is set to true,\nforEachEntry terminates right away (without iterating over the rest of the dictionary). The\nreturn value of forEackKeyValuePair is returnVal (which by default is undefined).</param>",
                    "type": "Function"
                },
                {
                    "name": "sortFcn",
                    "description": "true if the dictionary keys are to be sorted before iterating",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "scope",
                    "description": "The scope to be hitched to the given fcn",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Dictionary",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 68,
            "description": "Iterates over the key-value pair in the given dictionary and\nreturns the index of the first element to cause the given fcn to return\ntrue.",
            "itemtype": "method",
            "name": "find",
            "static": 1,
            "params": [
                {
                    "name": "dict",
                    "description": "a dictionary object",
                    "type": "Object"
                },
                {
                    "name": "fcn",
                    "description": "a function that takes the following parameters:\n- the `key`\n- the `value`\nand returns true if the given key or value satisfy some condition",
                    "type": "Function"
                },
                {
                    "name": "compareFcn",
                    "description": "a comparator function (takes two arguments and returns an integer) used to sort the keys",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Dictionary",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 116,
            "description": "Returns the number of keys in the given dictionary.",
            "itemtype": "method",
            "name": "length",
            "params": [
                {
                    "name": "dict",
                    "description": "a dictionary",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the number of keys in the dictionary",
                "type": "Integer"
            },
            "static": 1,
            "class": "Dictionary",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 128,
            "description": "Returns true if the given dictionary is empty (i.e. has no keys)",
            "itemtype": "method",
            "name": "isEmpty",
            "static": 1,
            "params": [
                {
                    "name": "dict",
                    "description": "a dictionary",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the dictionary is empty, false otherwise",
                "type": "Boolean"
            },
            "class": "Dictionary",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 140,
            "description": "Returns a shallow copy of the given dictionary.",
            "static": 1,
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "dict",
                    "description": "a dictionary",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a shallow copy of the given dictionary",
                "type": "Object"
            },
            "class": "Dictionary",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 156,
            "description": "Converts the given array into a dictionary, where the values of the dictionary are values in\nthe array, and the keys are the return value of the given function.",
            "static": 1,
            "itemtype": "method",
            "name": "arrayToMap",
            "params": [
                {
                    "name": "arr",
                    "description": "an array",
                    "type": "Object"
                },
                {
                    "name": "fcn",
                    "description": "a function that takes one argument and returns a key for the given argument",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a dictionary",
                "type": "Object"
            },
            "class": "Dictionary",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\dictionary.js",
            "line": 174,
            "description": "Convert the given array into a dictionary, where the keys of the dictionary are the elements in the\nfirst array and the values of the dictionary are elements in the second array. The size of the two arrays\nmust match.",
            "static": 1,
            "itemtype": "method",
            "name": "zip",
            "params": [
                {
                    "name": "arr1",
                    "description": "the key array",
                    "type": "Object"
                },
                {
                    "name": "arr2",
                    "description": "the value array",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a dictionary",
                "type": "Object"
            },
            "class": "Dictionary",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\functionMangler.js",
            "line": 37,
            "description": "[_initDojoPrototype description] Adds following extensions:\n- `topic.subscrive(name, listener, scope)` - An extension of dojoLang.subscribe that allows the callback function to be\nhitched with the given scope.\n- `dojoOn(target, type, listener, scope)` -",
            "itemtype": "method",
            "name": "_initDojoPrototype",
            "access": "private",
            "tagname": "",
            "class": "FunctionMangler",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\functionMangler.js",
            "line": 69,
            "description": "[load description]",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "id",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "require",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "load",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "FunctionMangler",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 30,
            "description": "The name of the event or events separated by a comma to trigger the closing of the popup.",
            "itemtype": "property",
            "name": "reverseEvent",
            "type": "{String}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 40,
            "description": "The initially supplied handle to the PopupManager; a {{#crossLink \"jQuery\"}}{{/crossLink}} to listen to events on.",
            "itemtype": "property",
            "name": "handle",
            "type": "{JQuery}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 50,
            "description": "The initially supplied handle selector to be used in conjunction with handle when listening to events. Useful if the real handle doesn't exist yet.",
            "itemtype": "property",
            "name": "handleSelector",
            "type": "{String}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 59,
            "description": "The initially supplied target node of the popup.",
            "itemtype": "property",
            "name": "target",
            "type": "{JQuery}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 68,
            "description": "The initially supplied target selector to be used in conjunction with target. Useful when the target of the popup doesn't exist yet.",
            "itemtype": "property",
            "name": "targetSelector",
            "type": "{String}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 79,
            "description": "The function to execute when the popup opens.",
            "itemtype": "property",
            "name": "openHandler",
            "type": "{Function}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 88,
            "description": "The function to execute when the popup closes. If the function is not supplied, `openHandler` is used instead.",
            "itemtype": "property",
            "name": "closeHandler",
            "type": "{Function}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 97,
            "description": "The delay before closing the popup; used with \"hoverIntent\" event type.",
            "itemtype": "property",
            "name": "timeout",
            "type": "{Number}",
            "default": "0",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 106,
            "description": "The CSS class to be applied to the handle of the popup when the popup opens.",
            "itemtype": "property",
            "name": "activeClass",
            "type": "{String}",
            "default": "random guid",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 115,
            "description": "Indicates whether activeClass should be applied before openHandler function completes or after.",
            "itemtype": "property",
            "name": "setClassBefore",
            "type": "{String}",
            "default": "null",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 124,
            "description": "Indicates whether to apply aria-* attributes to DOM nodes.",
            "itemtype": "property",
            "name": "useAria",
            "type": "{Boolean}",
            "default": "true",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 133,
            "description": "Indicates whether focus should be reset to the handle of the popup when the popup is closed by the internal close button if present.",
            "itemtype": "property",
            "name": "resetFocusOnClose",
            "type": "{Boolean}",
            "default": "false",
            "class": "PopupBaseSettings",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 150,
            "description": "Properties object of the PopupBase.",
            "itemtype": "property",
            "name": "_attr",
            "access": "private",
            "tagname": "",
            "type": "{PopupBaseSettings}",
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 160,
            "description": "Finds and returns actual DOM nodes of popup handles, one or more. Used selector",
            "itemtype": "method",
            "name": "_getActualHandle",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "selector",
                    "description": "A {{#crossLink \"jQuery\"}}{{/crossLink}} of the actual handle.",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "return": {
                "description": "result An array of one or more jQuery objects that works as popup handles"
            },
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 180,
            "description": "Finds and returns an array of {{#crossLink \"Popup\"}}{{/crossLink}} objects, one or more, identified in the PopupBase.",
            "itemtype": "method",
            "name": "_spawnPopups",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "selector",
                    "description": "A {{#crossLink \"jQuery\"}}{{/crossLink}} of the actual handle.",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "return": {
                "description": "popups An array of one or more }{{/crossLink}} objects",
                "type": "#crossLink \"Popup\""
            },
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 227,
            "description": "Checks if any of the popups described by this PopupBase is closed.",
            "itemtype": "method",
            "name": "isOpen",
            "params": [
                {
                    "name": "selector",
                    "description": "A {{#crossLink \"jQuery\"}}{{/crossLink}} of the actual handle.",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "return": {
                "description": "result True if any of the described popup are open; false otherwise"
            },
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 246,
            "description": "Opens all the popups described by this PopupBase instance.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "selector",
                    "description": "A {{#crossLink \"jQuery\"}}{{/crossLink}} of the actual handle.",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 258,
            "description": "Closes all the popups described by this PopupBase instance.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "selector",
                    "description": "A {{#crossLink \"jQuery\"}}{{/crossLink}} of the actual handle.",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 270,
            "description": "Toggles all the popups described by this PopupBase instance.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "selector",
                    "description": "A {{#crossLink \"jQuery\"}}{{/crossLink}} of the actual handle. Generally, selector is not needed if popup manages only one handle/target pair.",
                    "type": "JQuery",
                    "optional": true
                },
                {
                    "name": "state",
                    "description": "Indicates if the popup should be toggled on or off. true - open; false - close;",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 283,
            "description": "Sets the appropriate aria-* attributes to the popup nodes according to the supplied `visible` parameter or with the internal state of the popup.",
            "itemtype": "method",
            "name": "setTargetAttr",
            "params": [
                {
                    "name": "visible",
                    "description": "Indicating the internal state of the popup",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "PopupBase",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 303,
            "description": "Indicates if the Popup target is being animated.",
            "itemtype": "property",
            "name": "_isAnimating",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 313,
            "description": "The function to execute when the popup opens.",
            "itemtype": "property",
            "name": "openHandler",
            "type": "{Function}",
            "default": "null",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 322,
            "description": "The function to execute when the popup closes.",
            "itemtype": "property",
            "name": "closeHandler",
            "type": "{Function}",
            "default": "null",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 331,
            "description": "The CSS class to be applied to the handle of the popup when the popup opens.",
            "itemtype": "property",
            "name": "activeClass",
            "type": "{String}",
            "default": "null",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 340,
            "description": "Indicates whether activeClass should be applied before openHandler function completes or after.",
            "itemtype": "property",
            "name": "setClassBefore",
            "type": "{String}",
            "default": "null",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 349,
            "description": "Indicates whether to apply aria-* attributes to DOM nodes.",
            "itemtype": "property",
            "name": "useAria",
            "type": "{Boolean}",
            "default": "true",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 358,
            "description": "An actual {{#crossLink \"jQuery\"}}{{/crossLink}} of the handle's DOM node.",
            "itemtype": "property",
            "name": "handle",
            "type": "{JQuery}",
            "default": "null",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 367,
            "description": "An actual {{#crossLink \"jQuery\"}}{{/crossLink}} of the targets's DOM node.",
            "itemtype": "property",
            "name": "target",
            "type": "{JQuery}",
            "default": "null",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 376,
            "description": "Checks if this Popup is open.",
            "itemtype": "method",
            "name": "isOpen",
            "return": {
                "description": "True if open, false otherwise",
                "type": "Boolean"
            },
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 386,
            "description": "Opens this Popup.",
            "itemtype": "method",
            "name": "open",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 405,
            "description": "Closes this Popup.",
            "itemtype": "method",
            "name": "close",
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 424,
            "description": "Toggles this Popup.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "state",
                    "description": "Indicates if the popup should be toggled on or off. true - open; false - close;",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 439,
            "description": "Performs actions like closing and opening on this Popup.",
            "itemtype": "method",
            "name": "_performAction",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "action",
                    "description": "Open or close action on this Popup",
                    "type": "Function"
                },
                {
                    "name": "cssAction",
                    "description": "Function setting style properties on this Popup",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                }
            ],
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 473,
            "description": "Sets the appropriate aria-* attributes to this popup nodes according to the supplied `visible` parameter or with the internal state of the popup.",
            "itemtype": "method",
            "name": "setTargetAttr",
            "params": [
                {
                    "name": "visible",
                    "description": "Indicating the internal state of the popup",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Popup",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 498,
            "description": "Create a new PopupBase object from the settings provided.",
            "itemtype": "method",
            "name": "newPopup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "popupAttr",
                    "description": "Popup settings",
                    "type": "PopupBaseSettings"
                }
            ],
            "return": {
                "description": "popup"
            },
            "class": "PopupManager",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\popupManager.js",
            "line": 541,
            "description": "Register a PopupBase definition. By a popup here we mean a section of the page that reacts to the user's action on this or different section of the page.\nCan be used to register popups with already existing page nodes, or, using handle and target selectors with the nodes that will be created later.\n\n####Example\n    popupManager.registerPopup(panelToggle, \"click\",\n        openPanel,\n            {\n                activeClass: cssExpandedClass,\n                closeHandler: closePanel\n            }\n        );\nHere we register a popup on the `panelToggle` node which will trigger `openPanel` function when the user clicks to open the popup and `closePanel` to close it;\n`cssExpandedClass` will be set on the `panelToggle` node when the popup is opened.\n\n     popupManager.registerPopup(sectionNode, \"hover, focus\",\n          openFunction,\n          {\n              handleSelector: \"tr\",\n\n              targetSelector: \".record-controls\",\n\n              closeHandler: closeFunction,\n\n              activeClass: \"bg-very-light\",\n              useAria: false\n          }\n      );\nHere we define a set of virtual popups on the `sectionNode` node that would be triggered when the user hovers over or sets focus to any `tr` child node of `sectionNode`.\nThen the `openFunction` will be executed with `this.handle` pointing to the actual handle node which trigged the popup and  `this.target` pointing to the actual target node\ncorresponding to a node or nodes found with the `targetSelector` inside the actual handle node.",
            "itemtype": "method",
            "name": "registerPopup",
            "static": 1,
            "params": [
                {
                    "name": "handle",
                    "description": "A {{#crossLink \"jQuery\"}}{{/crossLink}} handle to listen to events on",
                    "type": "JQuery"
                },
                {
                    "name": "event",
                    "description": "The name of the event or events separated by a comma to trigger the popup. There are several predefined event names to register hover popups:\n- `hoverIntent` uses the hoverIntent jQuery plugin to determine when the user intends to hover over something\n- `hover` is a combination of two events - `mouseleave` and `mouseenter` and unlike `hoverIntent` it is triggered immediatelly\n- `focus` is a combination of two events - `focusin` and `focusout`\nYou can subscribe to a combination of event shortcuts like `focus,hover`\n\nAdditionally, almost any other {{#crossLink \"jQuery\"}}{{/crossLink}} event can be specified like `click` or `keypress`.",
                    "type": "String"
                },
                {
                    "name": "openHandler",
                    "description": "The function to run when the popup opens",
                    "type": "Function"
                },
                {
                    "name": "settings",
                    "description": "additional setting to define the popup",
                    "type": "PopupBaseSettings",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a PopupBase with the specified conditions",
                "type": "PopupBase"
            },
            "class": "PopupManager",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 25,
            "description": "Attempt to add the given fcn as a prototype to the given obj under\nthe given name. Outputs a warning message to the console if\na prototype of the same name already exists.",
            "itemtype": "method",
            "name": "addProtytype",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fcn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 44,
            "description": "Attempt to add the given fcn as a static function to the given class under\nthe given name. Outputs a warning message to the console if\na function of the same name already exists.",
            "itemtype": "method",
            "name": "AddStaticFcn",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fcn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 63,
            "description": "Add extra functions to the Array object. Adds the following:\n- `Array.remove()` - prototype for removing items from array\n- `Array.append(arr)` - Add all the elements of the given array to this array.\n- `Array.isEmpty()` - Returns true if the length of the array is 0.\n- `Array.last()` - Returns true if the length of the array is 0.\n- `Array.contains(obj)` - Returns true if this Array contains the given object\n- `Array.flatter(arr)` - Array Flatten object extension: http://tech.karbassi.com/2009/12/17/pure-javascript-flatten-array/\n- `Array.max()` - Returns the max value in the array\n- `Array.min()` - Returns the min value in the array",
            "itemtype": "method",
            "name": "_initArrayPrototype",
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 148,
            "description": "Add extra functions to the Object object. Adds the following:\n- `Object.create(o)` - Takes an old object as a parameter and returns an empty new object that inherits from the old one",
            "itemtype": "method",
            "name": "_initObjectPrototype",
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 165,
            "description": "Add extra functions to the String object. Adds the following:\n- `String.format()` - format the string replacing the placeholders with provided values\n- `String.replaceAll(search, replace)` - replaces all instances",
            "itemtype": "method",
            "name": "_initStringPrototype",
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 193,
            "description": "Add extra functions to the EsriExtent object. Adds the following:\n- `EsriExtent.clone()` -\n- `EsriExtent.widht()` -\n- `EsriExtent.height()` -\n- `EsriExtent.xyAspectFactor()` - Returns the ratio of this Extent's width to this Extent's height\n- `EsriExtent.centerX()` -\n- `EsriExtent.centerY()` -\n- `EsriExtent.center()` -\n- `EsriExtent.pan()` -",
            "itemtype": "method",
            "name": "_initEsriPrototype",
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 248,
            "description": "Add extra jQuery functions. Adds the following:\n- `$.findInputLabel()` - Returns labels corresponding to the set of input controls.\n- `$.isOverflowed()` - Detects if the given span is overflowing with text",
            "itemtype": "method",
            "name": "_initJQueryprototype",
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\prototype.js",
            "line": 306,
            "description": "Defines useful prototypes for basic types in javascript (e.g. String, Array)",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "require",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "load",
                    "description": "",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "load",
            "class": "Prototype",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\tmplUtil.js",
            "line": 22,
            "description": "Given a feature object or a graphic object (or any object that has a getLayer method and an\nattributes field) return the image URL for that feature/graphic object.\n\nNOTE: all dependent functions should be written as nested functions inside the caller function, otherwise TmplEx templating library won't identify",
            "itemtype": "method",
            "name": "getGraphicIcon",
            "params": [
                {
                    "name": "graphic",
                    "description": "",
                    "type": "Graphic"
                },
                {
                    "name": "layerConfig",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "imageUrl Url to the features symbology image",
                "type": "String"
            },
            "class": "TmplUtil",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\tmplUtil.js",
            "line": 49,
            "description": "Given a feature object or a graphic object (or any object that has a getLayer method and an\nattributes field) return the attribute value for its designed \"name\" field\n\nNOTE: all dependent functions should be written as nested functions inside the caller function, otherwise TmplEx templating library won't identify",
            "itemtype": "method",
            "name": "getFeatureName",
            "params": [
                {
                    "name": "graphic",
                    "description": "",
                    "type": "Graphic"
                },
                {
                    "name": "layerConfig",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "imageUrl Url to the features symbology image",
                "type": "String"
            },
            "class": "TmplUtil",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\tmplUtil.js",
            "line": 64,
            "description": "Given a feature object return the objectid for that item.\nThis will likely fail on a non-feature object (e.g. a plain graphic)\n\nNOTE: all dependent functions should be written as nested functions inside the caller function, otherwise TmplEx templating library won't identify",
            "itemtype": "method",
            "name": "getObjectId",
            "params": [
                {
                    "name": "graphic",
                    "description": "",
                    "type": "Graphic"
                }
            ],
            "return": {
                "description": "objectId",
                "type": "Integer"
            },
            "class": "TmplUtil",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 32,
            "description": "Checks if the console exists, if not, redefine the console and all console methods to\na function that does nothing. Useful for IE which does not have the console until the\ndebugger is opened.",
            "itemtype": "method",
            "name": "checkConsole",
            "static": 1,
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 64,
            "description": "Returns an String that has it's angle brackets ('<' and '>') escaped (replaced by '&lt;' and '&gt;').\nThis will effectively cause the String to be displayed in plain text when embedded in an HTML page.",
            "itemtype": "method",
            "name": "escapeHtml",
            "static": 1,
            "params": [
                {
                    "name": "html",
                    "description": "String to escape",
                    "type": "String"
                }
            ],
            "return": {
                "description": "escapeHtml Escaped string",
                "type": "String"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 77,
            "description": "Returns true if the given String is a number",
            "itemtype": "method",
            "name": "isNumber",
            "static": 1,
            "params": [
                {
                    "name": "input",
                    "description": "The string to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if number",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 89,
            "description": "Parse the given String into a boolean. Returns true if the String\nis the word \"true\" (case insensitive). False otherwise.",
            "itemtype": "method",
            "name": "parseBool",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "The string to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if `true`",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 104,
            "description": "Executes the callback function only after all the deferred Objects in the\ngiven deferredList has resolved.",
            "itemtype": "method",
            "name": "afterAll",
            "static": 1,
            "params": [
                {
                    "name": "deferredList",
                    "description": "A list of Deferred objects",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 132,
            "description": "Converts an array into a '+' separated String that can be used as\nthe query parameter of a URL.\n\n     arrayToQuery([\"abc\", 123, \"efg\"]) -> \"abc+123+efg\"\n\n*__NOTE:__ the array should only contain primitives, objects will not be serialized\nproperly.*",
            "itemtype": "method",
            "name": "arrayToQuery",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "An array of primitives to be serialized",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A serialized representation of the given array",
                "type": "String"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 150,
            "description": "Converts a query String generated by arrayToQuery into an array object.\nThe array object will only contain Strings.\n\n     queryToArray(\"abc+123+efg\") -> [\"abc\", \"123\", \"efg\"]",
            "itemtype": "method",
            "name": "queryToArray",
            "static": 1,
            "params": [
                {
                    "name": "query",
                    "description": "A query string to be converted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A resulting array of strings",
                "type": "String"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 167,
            "description": "A convenience method that wraps around Dojo's subscribe method to allow\na scope to hitched to the given callback function.",
            "itemtype": "method",
            "name": "subscribe",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Scope of the callback",
                    "type": "Object"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 185,
            "description": "Subscribes to an event, after the event has occurred, the handle is\nremoved.",
            "itemtype": "method",
            "name": "subscribeOnce",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 204,
            "description": "Subscribes to a set of events, executes the callback when any of the events fire, then removes the handle.",
            "itemtype": "method",
            "name": "subscribeOnceAny",
            "static": 1,
            "params": [
                {
                    "name": "names",
                    "description": "An array of event names",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 229,
            "description": "Given an array of event names published by topic.publish, call the given\ncallback function after ALL of the given events have occurred. An array of\narguments is passed to the callback function, the arguments are those returned\nby the events (in the order that the events appear in the array).\n\n#####Example\n\nAssume somewhere a module publishes a \"click\" event:\n\n     topic.publish(\"click\", { mouseX: 10, mouseY: 50 });\n\nand somewhere else another module publishes a \"finishLoading\" event:\n\n     topic.publish(\"finishLoading\", { loadedPictures: [pic1, pic2] });\n\nThen if one wants to do something (e.g. display pictures) only after the pictures\nhave been loaded AND the user clicked somewhere, then:\n\n- args[0] will be the object returned by the \"click\" event\n- which in this case will be: { mouseX: 10, mouseY: 50 }\n- args[1] will be the object returned by the \"finishLoading\" event\n- which in this case will be: { loadedPictures: [pic1, pic2] }\n\n\n     subscribe([\"click\", \"finishLoading\"], function(args) {\n         doSomething();\n     });\n\n*__NOTE:__\nIf one of the events fires multiple times before the other event, the object\npassed by this function to the callback will be the object returned when the\nevent FIRST fired (subsequent firings of the same event are ignored). Also, if\nsome event do not return an object, it will also be excluded in the arguments to\nthe callback function. So be careful! For example, say you subscribed to the events:\n\"evt1\", \"evt2\", \"evt3\". \"evt1\" returns an object (call it \"evt1Obj\"), \"evt2\" does not,\n\"evt3\" returns two objects (call it \"evt3Obj-1\" and \"evt3Obj-2\" respectively).\nThen the array passed to the callback will be: [\"evt1Obj\", \"evt3Obj-1\", \"evt3Obj-2\"].*",
            "itemtype": "method",
            "name": "subscribeAll",
            "static": 1,
            "params": [
                {
                    "name": "nameArray",
                    "description": "An array of Strings containing the names of events to subscribe to",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 308,
            "description": "Creates an object that acts like a lazy variable (i.e. a variable whose value is only\nresolved the first time it is retrieved, not when it is assigned). The value given to\nthe lazy variable should be the return value of the given initFunc. The returned object\nhas two methods:\n\n- get - returns the value of the variable, if it is the first time get is called, the\nthe initFunc will be called to resolve the value of the variable.\n- reset - forces the variable to call the initFunc again the next time get is called",
            "itemtype": "method",
            "name": "createLazyVariable",
            "static": 1,
            "params": [
                {
                    "name": "initFunc",
                    "description": "A function to call to resolve the variable value",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The lazy varialbe",
                "type": "Object"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 341,
            "description": "Returns a function that has the same functionality as the given function, but\ncan only be executed once (subsequent execution does nothing).",
            "itemtype": "method",
            "name": "once",
            "static": 1,
            "params": [
                {
                    "name": "func",
                    "description": "Function to be decorated",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Decorated function that can be executed once",
                "type": "Function"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 362,
            "description": "Returns true if the given obj is undefined, false otherwise.",
            "itemtype": "method",
            "name": "isUndefined",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be checked",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the given object is undefined, false otherwise",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 374,
            "description": "Compares two graphic objects.",
            "itemtype": "method",
            "name": "compareGraphics",
            "static": 1,
            "params": [
                {
                    "name": "one",
                    "description": "Graphic object",
                    "type": "Object"
                },
                {
                    "name": "two",
                    "description": "Graphic object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the objects represent the same feature",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 402,
            "description": "Returns the width of the scrollbar in pixels. Since different browsers render scrollbars differently, the width may vary.",
            "itemtype": "method",
            "name": "scrollbarWidth",
            "static": 1,
            "return": {
                "description": "The width of the scrollbar in pixels",
                "type": "Int"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 426,
            "description": "Checks if the height of the scrollable content of the body is taller than its height;\nif so, offset the content horizontally to accomodate for the scrollbar assuming target's width is\nset to \"100%\".",
            "itemtype": "method",
            "name": "adjustWidthForSrollbar",
            "static": 1,
            "params": [
                {
                    "name": "body",
                    "description": "A DOM node with a scrollbar (or not)",
                    "type": "JObject"
                },
                {
                    "name": "targets",
                    "description": "An array of jObjects to add the offset to",
                    "type": "JObject"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 446,
            "description": "Waits until a given function is available and executes a callback function.",
            "itemtype": "method",
            "name": "executeOnLoad",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "an object on which to wait for function to appear",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "A function whose availability in question",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "The callback function to be executed after func is available",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 473,
            "description": "Loops through all object properties and applies a given function to each. Resolves the given deferred when done.",
            "itemtype": "method",
            "name": "executeOnDone",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "Object to look through",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "A function to be executed with each object propety. Accepts two parameters: property and deferred to be resolved when it's done.",
                    "type": "Function"
                },
                {
                    "name": "d",
                    "description": "A deferred to be resolved when all properties have been processed.",
                    "type": "Object"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 521,
            "description": "Generates an rfc4122 version 4 compliant guid.\nTaken from here: http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript",
            "itemtype": "method",
            "name": "guid",
            "static": 1,
            "return": {
                "description": "The generated guid string",
                "type": "String"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 537,
            "description": "Returns an appropriate where clause depending on whether the query\nis a String (returns a where clause with CASE INSENSITIVE comparison)\nor an integer.",
            "itemtype": "method",
            "name": "getWhereClause",
            "static": 1,
            "params": [
                {
                    "name": "varName",
                    "description": "???",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "A query string",
                    "type": "String | Number"
                }
            ],
            "return": {
                "description": "The generated \"where\" clause",
                "type": "String"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 555,
            "description": "Converts html into text by replacing\nall html tags with their appropriate special characters",
            "itemtype": "method",
            "name": "stripHtml",
            "static": 1,
            "params": [
                {
                    "name": "html",
                    "description": "HTML to be converted to text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The HTML in text form",
                "type": "String"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 592,
            "description": "Checks if the string ends with the supplied suffix.",
            "itemtype": "method",
            "name": "endsWith",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "String to be evaluated",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "Ending string to be matched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if suffix matches",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 605,
            "description": "Applies supplied xslt to supplied xml. IE always returns a String; others may return a documentFragment or a jObject.",
            "itemtype": "method",
            "name": "transformXML",
            "static": 1,
            "params": [
                {
                    "name": "xmlurl",
                    "description": "Location of the xml file",
                    "type": "String"
                },
                {
                    "name": "xslurl",
                    "description": "Location of the xslt file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                },
                {
                    "name": "returnFragment",
                    "description": "True if you want a document fragment returned (doesn't work in IE)}",
                    "type": "Boolean"
                }
            ],
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\Utils\\util.js",
            "line": 787,
            "description": "[settings.linkLists]: false",
            "class": "Util",
            "module": "Utils"
        },
        {
            "file": "src\\js\\RAMP\\bootstrapper.js",
            "line": 79,
            "description": "loadPlugin takes a plugin file and loads it into the DOM.\nCreates a dynamic script tag to load the script at runtime.",
            "itemtype": "method",
            "name": "loadPlugin",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pluginName,",
                    "description": "the file name of the plugin to be loaded (should be in the plugins folder)",
                    "type": "String"
                }
            ],
            "class": "Bootstrapper",
            "module": "RAMP"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\js\\RAMP\\Modules\\datagrid.js:1075"
        },
        {
            "message": "unknown tag: uese",
            "line": " src\\js\\RAMP\\Modules\\filterManager.js:11"
        },
        {
            "message": "unknown tag: uese",
            "line": " src\\js\\RAMP\\Modules\\filterManager.js:11"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\js\\RAMP\\Modules\\ramp.js:103"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\js\\RAMP\\Modules\\ramp.js:114"
        },
        {
            "message": "Missing item type",
            "line": " src\\js\\RAMP\\Modules\\datagrid.js:809"
        },
        {
            "message": "Missing item type\nPublished when the gui module has completely finished rendering the UI.\nThe bootstrapper should wait for this event to fire before initializing map.",
            "line": " src\\js\\RAMP\\Modules\\eventManager.js:270"
        },
        {
            "message": "Missing item type\n[settings.linkLists]: false",
            "line": " src\\js\\RAMP\\Utils\\util.js:787"
        }
    ]
}